// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WafRuleRevisionAttributesState - The state, indicating if the revision is the most recent version of the rule.
type WafRuleRevisionAttributesState string

const (
	WafRuleRevisionAttributesStateLatest   WafRuleRevisionAttributesState = "latest"
	WafRuleRevisionAttributesStateOutdated WafRuleRevisionAttributesState = "outdated"
)

func (e WafRuleRevisionAttributesState) ToPointer() *WafRuleRevisionAttributesState {
	return &e
}

func (e *WafRuleRevisionAttributesState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "latest":
		fallthrough
	case "outdated":
		*e = WafRuleRevisionAttributesState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WafRuleRevisionAttributesState: %v", v)
	}
}

type WafRuleRevisionAttributes struct {
	// Message metadata for the rule.
	Message *string `json:"message,omitempty"`
	// Corresponding ModSecurity rule ID.
	ModsecRuleID *int64 `json:"modsec_rule_id,omitempty"`
	// Paranoia level for the rule.
	ParanoiaLevel *int64 `json:"paranoia_level,omitempty"`
	// Revision number.
	Revision *int64 `json:"revision,omitempty"`
	// Severity metadata for the rule.
	Severity *int64 `json:"severity,omitempty"`
	// The ModSecurity rule logic.
	Source *string `json:"source,omitempty"`
	// The state, indicating if the revision is the most recent version of the rule.
	State *WafRuleRevisionAttributesState `json:"state,omitempty"`
	// The VCL representation of the rule logic.
	Vcl *string `json:"vcl,omitempty"`
}

type WafRuleRevision struct {
	Attributes *WafRuleRevisionAttributes `json:"attributes,omitempty"`
	// Alphanumeric string identifying a WAF rule revision.
	ID *string `json:"id,omitempty"`
	// Resource type.
	Type *TypeWafRuleRevision `json:"type,omitempty"`
}
