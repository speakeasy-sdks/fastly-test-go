// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// LoggingSftpCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingSftpCompressionCodec string

const (
	LoggingSftpCompressionCodecZstd   LoggingSftpCompressionCodec = "zstd"
	LoggingSftpCompressionCodecSnappy LoggingSftpCompressionCodec = "snappy"
	LoggingSftpCompressionCodecGzip   LoggingSftpCompressionCodec = "gzip"
)

func (e LoggingSftpCompressionCodec) ToPointer() *LoggingSftpCompressionCodec {
	return &e
}

func (e *LoggingSftpCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingSftpCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingSftpCompressionCodec: %v", v)
	}
}

// LoggingSftpFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingSftpFormatVersion int64

const (
	LoggingSftpFormatVersionOne LoggingSftpFormatVersion = 1
	LoggingSftpFormatVersionTwo LoggingSftpFormatVersion = 2
)

func (e LoggingSftpFormatVersion) ToPointer() *LoggingSftpFormatVersion {
	return &e
}

func (e *LoggingSftpFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingSftpFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingSftpFormatVersion: %v", v)
	}
}

// LoggingSftpMessageType - How the message should be formatted.
type LoggingSftpMessageType string

const (
	LoggingSftpMessageTypeClassic LoggingSftpMessageType = "classic"
	LoggingSftpMessageTypeLoggly  LoggingSftpMessageType = "loggly"
	LoggingSftpMessageTypeLogplex LoggingSftpMessageType = "logplex"
	LoggingSftpMessageTypeBlank   LoggingSftpMessageType = "blank"
)

func (e LoggingSftpMessageType) ToPointer() *LoggingSftpMessageType {
	return &e
}

func (e *LoggingSftpMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingSftpMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingSftpMessageType: %v", v)
	}
}

// LoggingSftpPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingSftpPlacement string

const (
	LoggingSftpPlacementNone                   LoggingSftpPlacement = "none"
	LoggingSftpPlacementWafDebug               LoggingSftpPlacement = "waf_debug"
	LoggingSftpPlacementLessThanNilGreaterThan LoggingSftpPlacement = "<nil>"
)

func (e LoggingSftpPlacement) ToPointer() *LoggingSftpPlacement {
	return &e
}

func (e *LoggingSftpPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingSftpPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingSftpPlacement: %v", v)
	}
}

type LoggingSftpInput struct {
	// A hostname or IPv4 address.
	Address *string `form:"name=address"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingSftpCompressionCodec `form:"name=compression_codec"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingSftpFormatVersion `default:"2" form:"name=format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `default:"0" form:"name=gzip_level"`
	// How the message should be formatted.
	MessageType *LoggingSftpMessageType `default:"classic" form:"name=message_type"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// The password for the server. If both `password` and `secret_key` are passed, `secret_key` will be used in preference.
	Password *string `form:"name=password"`
	// The path to upload logs to.
	Path *string `default:"null" form:"name=path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `default:"3600" form:"name=period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingSftpPlacement `form:"name=placement"`
	// The port number.
	Port *int64 `default:"22" form:"name=port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `default:"null" form:"name=public_key"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// The SSH private key for the server. If both `password` and `secret_key` are passed, `secret_key` will be used in preference.
	SecretKey *string `default:"null" form:"name=secret_key"`
	// A list of host keys for all hosts we can connect to over SFTP.
	SSHKnownHosts *string `form:"name=ssh_known_hosts"`
	// The username for the server.
	User *string `form:"name=user"`
}

func (l LoggingSftpInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingSftpInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingSftpInput) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *LoggingSftpInput) GetCompressionCodec() *LoggingSftpCompressionCodec {
	if o == nil {
		return nil
	}
	return o.CompressionCodec
}

func (o *LoggingSftpInput) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingSftpInput) GetFormatVersion() *LoggingSftpFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingSftpInput) GetGzipLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.GzipLevel
}

func (o *LoggingSftpInput) GetMessageType() *LoggingSftpMessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingSftpInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingSftpInput) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *LoggingSftpInput) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *LoggingSftpInput) GetPeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *LoggingSftpInput) GetPlacement() *LoggingSftpPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingSftpInput) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *LoggingSftpInput) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

func (o *LoggingSftpInput) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingSftpInput) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

func (o *LoggingSftpInput) GetSSHKnownHosts() *string {
	if o == nil {
		return nil
	}
	return o.SSHKnownHosts
}

func (o *LoggingSftpInput) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
