// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// LoggingS3CompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingS3CompressionCodec string

const (
	LoggingS3CompressionCodecZstd   LoggingS3CompressionCodec = "zstd"
	LoggingS3CompressionCodecSnappy LoggingS3CompressionCodec = "snappy"
	LoggingS3CompressionCodecGzip   LoggingS3CompressionCodec = "gzip"
)

func (e LoggingS3CompressionCodec) ToPointer() *LoggingS3CompressionCodec {
	return &e
}

func (e *LoggingS3CompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingS3CompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingS3CompressionCodec: %v", v)
	}
}

// LoggingS3FormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingS3FormatVersion int64

const (
	LoggingS3FormatVersionOne LoggingS3FormatVersion = 1
	LoggingS3FormatVersionTwo LoggingS3FormatVersion = 2
)

func (e LoggingS3FormatVersion) ToPointer() *LoggingS3FormatVersion {
	return &e
}

func (e *LoggingS3FormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingS3FormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingS3FormatVersion: %v", v)
	}
}

// LoggingS3MessageType - How the message should be formatted.
type LoggingS3MessageType string

const (
	LoggingS3MessageTypeClassic LoggingS3MessageType = "classic"
	LoggingS3MessageTypeLoggly  LoggingS3MessageType = "loggly"
	LoggingS3MessageTypeLogplex LoggingS3MessageType = "logplex"
	LoggingS3MessageTypeBlank   LoggingS3MessageType = "blank"
)

func (e LoggingS3MessageType) ToPointer() *LoggingS3MessageType {
	return &e
}

func (e *LoggingS3MessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingS3MessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingS3MessageType: %v", v)
	}
}

// LoggingS3Placement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingS3Placement string

const (
	LoggingS3PlacementNone                   LoggingS3Placement = "none"
	LoggingS3PlacementWafDebug               LoggingS3Placement = "waf_debug"
	LoggingS3PlacementLessThanNilGreaterThan LoggingS3Placement = "<nil>"
)

func (e LoggingS3Placement) ToPointer() *LoggingS3Placement {
	return &e
}

func (e *LoggingS3Placement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingS3Placement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingS3Placement: %v", v)
	}
}

type LoggingS3Input struct {
	// The access key for your S3 account. Not required if `iam_role` is provided.
	AccessKey *string `form:"name=access_key"`
	// The access control list (ACL) specific request header. See the AWS documentation for [Access Control List (ACL) Specific Request Headers](https://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html#initiate-mpu-acl-specific-request-headers) for more information.
	ACL *string `form:"name=acl"`
	// The bucket name for S3 account.
	BucketName *string `form:"name=bucket_name"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingS3CompressionCodec `form:"name=compression_codec"`
	// The domain of the Amazon S3 endpoint.
	Domain *string `form:"name=domain"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingS3FormatVersion `default:"2" form:"name=format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `default:"0" form:"name=gzip_level"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `access_key` and `secret_key` are provided.
	IamRole *string `form:"name=iam_role"`
	// How the message should be formatted.
	MessageType *LoggingS3MessageType `default:"classic" form:"name=message_type"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// The path to upload logs to.
	Path *string `default:"null" form:"name=path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `default:"3600" form:"name=period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingS3Placement `form:"name=placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `default:"null" form:"name=public_key"`
	// The S3 redundancy level.
	Redundancy *string `default:"null" form:"name=redundancy"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// The secret key for your S3 account. Not required if `iam_role` is provided.
	SecretKey *string `form:"name=secret_key"`
	// Set this to `AES256` or `aws:kms` to enable S3 Server Side Encryption.
	ServerSideEncryption *string `default:"null" form:"name=server_side_encryption"`
	// Optional server-side KMS Key Id. Must be set if `server_side_encryption` is set to `aws:kms` or `AES256`.
	ServerSideEncryptionKmsKeyID *string `default:"null" form:"name=server_side_encryption_kms_key_id"`
}

func (l LoggingS3Input) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingS3Input) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingS3Input) GetAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AccessKey
}

func (o *LoggingS3Input) GetACL() *string {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *LoggingS3Input) GetBucketName() *string {
	if o == nil {
		return nil
	}
	return o.BucketName
}

func (o *LoggingS3Input) GetCompressionCodec() *LoggingS3CompressionCodec {
	if o == nil {
		return nil
	}
	return o.CompressionCodec
}

func (o *LoggingS3Input) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *LoggingS3Input) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingS3Input) GetFormatVersion() *LoggingS3FormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingS3Input) GetGzipLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.GzipLevel
}

func (o *LoggingS3Input) GetIamRole() *string {
	if o == nil {
		return nil
	}
	return o.IamRole
}

func (o *LoggingS3Input) GetMessageType() *LoggingS3MessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingS3Input) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingS3Input) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *LoggingS3Input) GetPeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *LoggingS3Input) GetPlacement() *LoggingS3Placement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingS3Input) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

func (o *LoggingS3Input) GetRedundancy() *string {
	if o == nil {
		return nil
	}
	return o.Redundancy
}

func (o *LoggingS3Input) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingS3Input) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

func (o *LoggingS3Input) GetServerSideEncryption() *string {
	if o == nil {
		return nil
	}
	return o.ServerSideEncryption
}

func (o *LoggingS3Input) GetServerSideEncryptionKmsKeyID() *string {
	if o == nil {
		return nil
	}
	return o.ServerSideEncryptionKmsKeyID
}
