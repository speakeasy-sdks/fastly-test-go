// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// LoggingHoneycombFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingHoneycombFormatVersion int64

const (
	LoggingHoneycombFormatVersionOne LoggingHoneycombFormatVersion = 1
	LoggingHoneycombFormatVersionTwo LoggingHoneycombFormatVersion = 2
)

func (e LoggingHoneycombFormatVersion) ToPointer() *LoggingHoneycombFormatVersion {
	return &e
}

func (e *LoggingHoneycombFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingHoneycombFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHoneycombFormatVersion: %v", v)
	}
}

// LoggingHoneycombPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingHoneycombPlacement string

const (
	LoggingHoneycombPlacementNone                   LoggingHoneycombPlacement = "none"
	LoggingHoneycombPlacementWafDebug               LoggingHoneycombPlacement = "waf_debug"
	LoggingHoneycombPlacementLessThanNilGreaterThan LoggingHoneycombPlacement = "<nil>"
)

func (e LoggingHoneycombPlacement) ToPointer() *LoggingHoneycombPlacement {
	return &e
}

func (e *LoggingHoneycombPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingHoneycombPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHoneycombPlacement: %v", v)
	}
}

type LoggingHoneycomb2 struct {
	// The Honeycomb Dataset you want to log to.
	Dataset *string `form:"name=dataset" json:"dataset,omitempty"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Honeycomb can ingest.
	Format *string `form:"name=format" json:"format,omitempty"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingHoneycombFormatVersion `default:"2" form:"name=format_version" json:"format_version"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name" json:"name,omitempty"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingHoneycombPlacement `form:"name=placement" json:"placement,omitempty"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition" json:"response_condition,omitempty"`
	// The Write Key from the Account page of your Honeycomb account.
	Token *string `form:"name=token" json:"token,omitempty"`
}

func (l LoggingHoneycomb2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingHoneycomb2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingHoneycomb2) GetDataset() *string {
	if o == nil {
		return nil
	}
	return o.Dataset
}

func (o *LoggingHoneycomb2) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingHoneycomb2) GetFormatVersion() *LoggingHoneycombFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingHoneycomb2) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingHoneycomb2) GetPlacement() *LoggingHoneycombPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingHoneycomb2) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingHoneycomb2) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}
