// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// LoggingAzureblobCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingAzureblobCompressionCodec string

const (
	LoggingAzureblobCompressionCodecZstd   LoggingAzureblobCompressionCodec = "zstd"
	LoggingAzureblobCompressionCodecSnappy LoggingAzureblobCompressionCodec = "snappy"
	LoggingAzureblobCompressionCodecGzip   LoggingAzureblobCompressionCodec = "gzip"
)

func (e LoggingAzureblobCompressionCodec) ToPointer() *LoggingAzureblobCompressionCodec {
	return &e
}

func (e *LoggingAzureblobCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingAzureblobCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingAzureblobCompressionCodec: %v", v)
	}
}

// LoggingAzureblobFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingAzureblobFormatVersion int64

const (
	LoggingAzureblobFormatVersionOne LoggingAzureblobFormatVersion = 1
	LoggingAzureblobFormatVersionTwo LoggingAzureblobFormatVersion = 2
)

func (e LoggingAzureblobFormatVersion) ToPointer() *LoggingAzureblobFormatVersion {
	return &e
}

func (e *LoggingAzureblobFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingAzureblobFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingAzureblobFormatVersion: %v", v)
	}
}

// LoggingAzureblobMessageType - How the message should be formatted.
type LoggingAzureblobMessageType string

const (
	LoggingAzureblobMessageTypeClassic LoggingAzureblobMessageType = "classic"
	LoggingAzureblobMessageTypeLoggly  LoggingAzureblobMessageType = "loggly"
	LoggingAzureblobMessageTypeLogplex LoggingAzureblobMessageType = "logplex"
	LoggingAzureblobMessageTypeBlank   LoggingAzureblobMessageType = "blank"
)

func (e LoggingAzureblobMessageType) ToPointer() *LoggingAzureblobMessageType {
	return &e
}

func (e *LoggingAzureblobMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingAzureblobMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingAzureblobMessageType: %v", v)
	}
}

// LoggingAzureblobPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingAzureblobPlacement string

const (
	LoggingAzureblobPlacementNone                   LoggingAzureblobPlacement = "none"
	LoggingAzureblobPlacementWafDebug               LoggingAzureblobPlacement = "waf_debug"
	LoggingAzureblobPlacementLessThanNilGreaterThan LoggingAzureblobPlacement = "<nil>"
)

func (e LoggingAzureblobPlacement) ToPointer() *LoggingAzureblobPlacement {
	return &e
}

func (e *LoggingAzureblobPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingAzureblobPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingAzureblobPlacement: %v", v)
	}
}

type LoggingAzureblobInput struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored. Required.
	AccountName *string `form:"name=account_name"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingAzureblobCompressionCodec `form:"name=compression_codec"`
	// The name of the Azure Blob Storage container in which to store logs. Required.
	Container *string `form:"name=container"`
	// The maximum number of bytes for each uploaded file. A value of 0 can be used to indicate there is no limit on the size of uploaded files, otherwise the minimum value is 1048576 bytes (1 MiB.)
	FileMaxBytes *int64 `form:"name=file_max_bytes"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingAzureblobFormatVersion `default:"2" form:"name=format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `default:"0" form:"name=gzip_level"`
	// How the message should be formatted.
	MessageType *LoggingAzureblobMessageType `default:"classic" form:"name=message_type"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// The path to upload logs to.
	Path *string `default:"null" form:"name=path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `default:"3600" form:"name=period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingAzureblobPlacement `form:"name=placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `default:"null" form:"name=public_key"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work. Required.
	SasToken *string `form:"name=sas_token"`
}

func (l LoggingAzureblobInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingAzureblobInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingAzureblobInput) GetAccountName() *string {
	if o == nil {
		return nil
	}
	return o.AccountName
}

func (o *LoggingAzureblobInput) GetCompressionCodec() *LoggingAzureblobCompressionCodec {
	if o == nil {
		return nil
	}
	return o.CompressionCodec
}

func (o *LoggingAzureblobInput) GetContainer() *string {
	if o == nil {
		return nil
	}
	return o.Container
}

func (o *LoggingAzureblobInput) GetFileMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.FileMaxBytes
}

func (o *LoggingAzureblobInput) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingAzureblobInput) GetFormatVersion() *LoggingAzureblobFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingAzureblobInput) GetGzipLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.GzipLevel
}

func (o *LoggingAzureblobInput) GetMessageType() *LoggingAzureblobMessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingAzureblobInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingAzureblobInput) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *LoggingAzureblobInput) GetPeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *LoggingAzureblobInput) GetPlacement() *LoggingAzureblobPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingAzureblobInput) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

func (o *LoggingAzureblobInput) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingAzureblobInput) GetSasToken() *string {
	if o == nil {
		return nil
	}
	return o.SasToken
}
