// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// LoggingDatadogResponseFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingDatadogResponseFormatVersion int64

const (
	LoggingDatadogResponseFormatVersionOne LoggingDatadogResponseFormatVersion = 1
	LoggingDatadogResponseFormatVersionTwo LoggingDatadogResponseFormatVersion = 2
)

func (e LoggingDatadogResponseFormatVersion) ToPointer() *LoggingDatadogResponseFormatVersion {
	return &e
}

func (e *LoggingDatadogResponseFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingDatadogResponseFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDatadogResponseFormatVersion: %v", v)
	}
}

// LoggingDatadogResponsePlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingDatadogResponsePlacement string

const (
	LoggingDatadogResponsePlacementNone                   LoggingDatadogResponsePlacement = "none"
	LoggingDatadogResponsePlacementWafDebug               LoggingDatadogResponsePlacement = "waf_debug"
	LoggingDatadogResponsePlacementLessThanNilGreaterThan LoggingDatadogResponsePlacement = "<nil>"
)

func (e LoggingDatadogResponsePlacement) ToPointer() *LoggingDatadogResponsePlacement {
	return &e
}

func (e *LoggingDatadogResponsePlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingDatadogResponsePlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDatadogResponsePlacement: %v", v)
	}
}

// LoggingDatadogResponseRegion - The region that log data will be sent to.
type LoggingDatadogResponseRegion string

const (
	LoggingDatadogResponseRegionUs LoggingDatadogResponseRegion = "US"
	LoggingDatadogResponseRegionEu LoggingDatadogResponseRegion = "EU"
)

func (e LoggingDatadogResponseRegion) ToPointer() *LoggingDatadogResponseRegion {
	return &e
}

func (e *LoggingDatadogResponseRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "US":
		fallthrough
	case "EU":
		*e = LoggingDatadogResponseRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDatadogResponseRegion: %v", v)
	}
}

type LoggingDatadogResponse struct {
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Datadog can ingest.
	//
	Format *string `json:"format,omitempty"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingDatadogResponseFormatVersion `json:"format_version,omitempty"`
	// The name for the real-time logging configuration.
	Name *string `json:"name,omitempty"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingDatadogResponsePlacement `json:"placement,omitempty"`
	// The region that log data will be sent to.
	Region *LoggingDatadogResponseRegion `json:"region,omitempty"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `json:"response_condition,omitempty"`
	ServiceID         *string `json:"service_id,omitempty"`
	// The API key from your Datadog account. Required.
	Token *string `json:"token,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Version   *int64     `json:"version,omitempty"`
}

func (o *LoggingDatadogResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *LoggingDatadogResponse) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *LoggingDatadogResponse) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingDatadogResponse) GetFormatVersion() *LoggingDatadogResponseFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingDatadogResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingDatadogResponse) GetPlacement() *LoggingDatadogResponsePlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingDatadogResponse) GetRegion() *LoggingDatadogResponseRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *LoggingDatadogResponse) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingDatadogResponse) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *LoggingDatadogResponse) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *LoggingDatadogResponse) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *LoggingDatadogResponse) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
