// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TLSSubscriptionDataAttributesCertificateAuthority - The entity that issues and certifies the TLS certificates for your subscription.
type TLSSubscriptionDataAttributesCertificateAuthority string

const (
	TLSSubscriptionDataAttributesCertificateAuthorityLetsEncrypt TLSSubscriptionDataAttributesCertificateAuthority = "lets-encrypt"
	TLSSubscriptionDataAttributesCertificateAuthorityGlobalsign  TLSSubscriptionDataAttributesCertificateAuthority = "globalsign"
)

func (e TLSSubscriptionDataAttributesCertificateAuthority) ToPointer() *TLSSubscriptionDataAttributesCertificateAuthority {
	return &e
}

func (e *TLSSubscriptionDataAttributesCertificateAuthority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lets-encrypt":
		fallthrough
	case "globalsign":
		*e = TLSSubscriptionDataAttributesCertificateAuthority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TLSSubscriptionDataAttributesCertificateAuthority: %v", v)
	}
}

type TLSSubscriptionDataAttributes struct {
	// The entity that issues and certifies the TLS certificates for your subscription.
	CertificateAuthority *TLSSubscriptionDataAttributesCertificateAuthority `json:"certificate_authority,omitempty"`
}

// TLSSubscriptionDataRelationships2Input - The common name associated with the subscription generated by Fastly TLS. Optional. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
type TLSSubscriptionDataRelationships2Input struct {
	CommonName *RelationshipMemberTLSDomainInput `json:"common_name,omitempty"`
}

type TLSSubscriptionDataRelationships1TLSConfigurationInput struct {
	Data *RelationshipMemberTLSConfigurationInput `json:"data,omitempty"`
}

// TLSSubscriptionDataRelationships1Input - The unique identifier for the set of TLS configuration options that apply to the enabled domains on this subscription. Write-only on create.
type TLSSubscriptionDataRelationships1Input struct {
	TLSConfiguration *TLSSubscriptionDataRelationships1TLSConfigurationInput `json:"tls_configuration,omitempty"`
}

type TLSSubscriptionDataInput struct {
	Attributes    *TLSSubscriptionDataAttributes `json:"attributes,omitempty"`
	Relationships interface{}                    `json:"relationships,omitempty"`
	// Resource type
	Type *TypeTLSSubscription `json:"type,omitempty"`
}
