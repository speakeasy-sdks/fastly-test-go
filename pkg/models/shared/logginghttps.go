// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// LoggingHTTPSFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingHTTPSFormatVersion int64

const (
	LoggingHTTPSFormatVersionOne LoggingHTTPSFormatVersion = 1
	LoggingHTTPSFormatVersionTwo LoggingHTTPSFormatVersion = 2
)

func (e LoggingHTTPSFormatVersion) ToPointer() *LoggingHTTPSFormatVersion {
	return &e
}

func (e *LoggingHTTPSFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingHTTPSFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHTTPSFormatVersion: %v", v)
	}
}

// LoggingHTTPSJSONFormat - Enforces valid JSON formatting for log entries.
type LoggingHTTPSJSONFormat string

const (
	LoggingHTTPSJSONFormatZero LoggingHTTPSJSONFormat = "0"
	LoggingHTTPSJSONFormatOne  LoggingHTTPSJSONFormat = "1"
	LoggingHTTPSJSONFormatTwo  LoggingHTTPSJSONFormat = "2"
)

func (e LoggingHTTPSJSONFormat) ToPointer() *LoggingHTTPSJSONFormat {
	return &e
}

func (e *LoggingHTTPSJSONFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = LoggingHTTPSJSONFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHTTPSJSONFormat: %v", v)
	}
}

// LoggingHTTPSMethod - HTTP method used for request.
type LoggingHTTPSMethod string

const (
	LoggingHTTPSMethodPost LoggingHTTPSMethod = "POST"
	LoggingHTTPSMethodPut  LoggingHTTPSMethod = "PUT"
)

func (e LoggingHTTPSMethod) ToPointer() *LoggingHTTPSMethod {
	return &e
}

func (e *LoggingHTTPSMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POST":
		fallthrough
	case "PUT":
		*e = LoggingHTTPSMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHTTPSMethod: %v", v)
	}
}

// LoggingHTTPSPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingHTTPSPlacement string

const (
	LoggingHTTPSPlacementNone                   LoggingHTTPSPlacement = "none"
	LoggingHTTPSPlacementWafDebug               LoggingHTTPSPlacement = "waf_debug"
	LoggingHTTPSPlacementLessThanNilGreaterThan LoggingHTTPSPlacement = "<nil>"
)

func (e LoggingHTTPSPlacement) ToPointer() *LoggingHTTPSPlacement {
	return &e
}

func (e *LoggingHTTPSPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingHTTPSPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHTTPSPlacement: %v", v)
	}
}

type LoggingHTTPS struct {
	// Content type of the header sent with the request.
	ContentType *string `default:"null" form:"name=content_type"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingHTTPSFormatVersion `default:"2" form:"name=format_version"`
	// Name of the custom header sent with the request.
	HeaderName *string `default:"null" form:"name=header_name"`
	// Value of the custom header sent with the request.
	HeaderValue *string `default:"null" form:"name=header_value"`
	// Enforces valid JSON formatting for log entries.
	JSONFormat *LoggingHTTPSJSONFormat `form:"name=json_format"`
	// How the message should be formatted.
	MessageType *LoggingMessageType `default:"classic" form:"name=message_type"`
	// HTTP method used for request.
	Method *LoggingHTTPSMethod `default:"POST" form:"name=method"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingHTTPSPlacement `form:"name=placement"`
	// The maximum number of bytes sent in one request. Defaults `0` (100MB).
	RequestMaxBytes *int64 `default:"0" form:"name=request_max_bytes"`
	// The maximum number of logs sent in one request. Defaults `0` (10k).
	RequestMaxEntries *int64 `default:"0" form:"name=request_max_entries"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// A secure certificate to authenticate a server with. Must be in PEM format.
	TLSCaCert *string `default:"null" form:"name=tls_ca_cert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TLSClientCert *string `default:"null" form:"name=tls_client_cert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TLSClientKey *string `default:"null" form:"name=tls_client_key"`
	// The hostname to verify the server's certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported.
	TLSHostname *string `default:"null" form:"name=tls_hostname"`
	// The URL to send logs to. Must use HTTPS. Required.
	URL *string `form:"name=url"`
}

func (l LoggingHTTPS) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingHTTPS) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingHTTPS) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *LoggingHTTPS) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingHTTPS) GetFormatVersion() *LoggingHTTPSFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingHTTPS) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *LoggingHTTPS) GetHeaderValue() *string {
	if o == nil {
		return nil
	}
	return o.HeaderValue
}

func (o *LoggingHTTPS) GetJSONFormat() *LoggingHTTPSJSONFormat {
	if o == nil {
		return nil
	}
	return o.JSONFormat
}

func (o *LoggingHTTPS) GetMessageType() *LoggingMessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingHTTPS) GetMethod() *LoggingHTTPSMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *LoggingHTTPS) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingHTTPS) GetPlacement() *LoggingHTTPSPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingHTTPS) GetRequestMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestMaxBytes
}

func (o *LoggingHTTPS) GetRequestMaxEntries() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestMaxEntries
}

func (o *LoggingHTTPS) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingHTTPS) GetTLSCaCert() *string {
	if o == nil {
		return nil
	}
	return o.TLSCaCert
}

func (o *LoggingHTTPS) GetTLSClientCert() *string {
	if o == nil {
		return nil
	}
	return o.TLSClientCert
}

func (o *LoggingHTTPS) GetTLSClientKey() *string {
	if o == nil {
		return nil
	}
	return o.TLSClientKey
}

func (o *LoggingHTTPS) GetTLSHostname() *string {
	if o == nil {
		return nil
	}
	return o.TLSHostname
}

func (o *LoggingHTTPS) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
