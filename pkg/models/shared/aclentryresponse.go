// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ACLEntryResponseNegated - Whether to negate the match. Useful primarily when creating individual exceptions to larger subnets.
type ACLEntryResponseNegated int64

const (
	ACLEntryResponseNegatedZero ACLEntryResponseNegated = 0
	ACLEntryResponseNegatedOne  ACLEntryResponseNegated = 1
)

func (e ACLEntryResponseNegated) ToPointer() *ACLEntryResponseNegated {
	return &e
}

func (e *ACLEntryResponseNegated) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = ACLEntryResponseNegated(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ACLEntryResponseNegated: %v", v)
	}
}

// ACLEntryResponse - OK
type ACLEntryResponse struct {
	ACLID *string `json:"acl_id,omitempty"`
	// A freeform descriptive note.
	Comment *string `json:"comment,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	ID        *string    `json:"id,omitempty"`
	// An IP address.
	IP *string `json:"ip,omitempty"`
	// Whether to negate the match. Useful primarily when creating individual exceptions to larger subnets.
	Negated   *ACLEntryResponseNegated `json:"negated,omitempty"`
	ServiceID *string                  `json:"service_id,omitempty"`
	// Number of bits for the subnet mask applied to the IP address. For IPv4 addresses, a value of 32 represents the smallest subnet mask (1 address), 24 represents a class C subnet mask (256 addresses), 16 represents a class B subnet mask (65k addresses), and 8 is class A subnet mask (16m addresses). If not provided, no mask is applied.
	Subnet *int64 `json:"subnet,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}
