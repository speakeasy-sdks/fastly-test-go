// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// LoggingLogentriesResponseFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingLogentriesResponseFormatVersion int64

const (
	LoggingLogentriesResponseFormatVersionOne LoggingLogentriesResponseFormatVersion = 1
	LoggingLogentriesResponseFormatVersionTwo LoggingLogentriesResponseFormatVersion = 2
)

func (e LoggingLogentriesResponseFormatVersion) ToPointer() *LoggingLogentriesResponseFormatVersion {
	return &e
}

func (e *LoggingLogentriesResponseFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingLogentriesResponseFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingLogentriesResponseFormatVersion: %v", v)
	}
}

// LoggingLogentriesResponsePlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingLogentriesResponsePlacement string

const (
	LoggingLogentriesResponsePlacementNone                   LoggingLogentriesResponsePlacement = "none"
	LoggingLogentriesResponsePlacementWafDebug               LoggingLogentriesResponsePlacement = "waf_debug"
	LoggingLogentriesResponsePlacementLessThanNilGreaterThan LoggingLogentriesResponsePlacement = "<nil>"
)

func (e LoggingLogentriesResponsePlacement) ToPointer() *LoggingLogentriesResponsePlacement {
	return &e
}

func (e *LoggingLogentriesResponsePlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingLogentriesResponsePlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingLogentriesResponsePlacement: %v", v)
	}
}

// LoggingLogentriesResponseRegion - The region to which to stream logs.
type LoggingLogentriesResponseRegion string

const (
	LoggingLogentriesResponseRegionUs  LoggingLogentriesResponseRegion = "US"
	LoggingLogentriesResponseRegionUs2 LoggingLogentriesResponseRegion = "US-2"
	LoggingLogentriesResponseRegionUs3 LoggingLogentriesResponseRegion = "US-3"
	LoggingLogentriesResponseRegionEu  LoggingLogentriesResponseRegion = "EU"
	LoggingLogentriesResponseRegionCa  LoggingLogentriesResponseRegion = "CA"
	LoggingLogentriesResponseRegionAu  LoggingLogentriesResponseRegion = "AU"
	LoggingLogentriesResponseRegionAp  LoggingLogentriesResponseRegion = "AP"
)

func (e LoggingLogentriesResponseRegion) ToPointer() *LoggingLogentriesResponseRegion {
	return &e
}

func (e *LoggingLogentriesResponseRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "US":
		fallthrough
	case "US-2":
		fallthrough
	case "US-3":
		fallthrough
	case "EU":
		fallthrough
	case "CA":
		fallthrough
	case "AU":
		fallthrough
	case "AP":
		*e = LoggingLogentriesResponseRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingLogentriesResponseRegion: %v", v)
	}
}

type LoggingLogentriesResponse struct {
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `json:"format,omitempty"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingLogentriesResponseFormatVersion `json:"format_version,omitempty"`
	// The name for the real-time logging configuration.
	Name *string `json:"name,omitempty"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingLogentriesResponsePlacement `json:"placement,omitempty"`
	// The port number.
	Port *int64 `json:"port,omitempty"`
	// The region to which to stream logs.
	Region *LoggingLogentriesResponseRegion `json:"region,omitempty"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `json:"response_condition,omitempty"`
	ServiceID         *string `json:"service_id,omitempty"`
	// Use token based authentication ([https://logentries.com/doc/input-token/](https://logentries.com/doc/input-token/)).
	Token *string `json:"token,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Whether to use TLS.
	UseTLS  *LoggingUseTLS `json:"use_tls,omitempty"`
	Version *int64         `json:"version,omitempty"`
}

func (o *LoggingLogentriesResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *LoggingLogentriesResponse) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *LoggingLogentriesResponse) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingLogentriesResponse) GetFormatVersion() *LoggingLogentriesResponseFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingLogentriesResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingLogentriesResponse) GetPlacement() *LoggingLogentriesResponsePlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingLogentriesResponse) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *LoggingLogentriesResponse) GetRegion() *LoggingLogentriesResponseRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *LoggingLogentriesResponse) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingLogentriesResponse) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *LoggingLogentriesResponse) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *LoggingLogentriesResponse) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *LoggingLogentriesResponse) GetUseTLS() *LoggingUseTLS {
	if o == nil {
		return nil
	}
	return o.UseTLS
}

func (o *LoggingLogentriesResponse) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
