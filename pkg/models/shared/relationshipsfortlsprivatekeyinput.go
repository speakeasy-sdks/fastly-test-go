// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"errors"
)

type RelationshipsForTLSPrivateKeyInputType string

const (
	RelationshipsForTLSPrivateKeyInputTypeRelationshipTLSActivationsInput RelationshipsForTLSPrivateKeyInputType = "relationship_tls_activationsInput"
	RelationshipsForTLSPrivateKeyInputTypeRelationshipTLSDomainsInput     RelationshipsForTLSPrivateKeyInputType = "relationship_tls_domainsInput"
)

type RelationshipsForTLSPrivateKeyInput struct {
	RelationshipTLSActivationsInput *RelationshipTLSActivationsInput
	RelationshipTLSDomainsInput     *RelationshipTLSDomainsInput

	Type RelationshipsForTLSPrivateKeyInputType
}

func CreateRelationshipsForTLSPrivateKeyInputRelationshipTLSActivationsInput(relationshipTLSActivationsInput RelationshipTLSActivationsInput) RelationshipsForTLSPrivateKeyInput {
	typ := RelationshipsForTLSPrivateKeyInputTypeRelationshipTLSActivationsInput

	return RelationshipsForTLSPrivateKeyInput{
		RelationshipTLSActivationsInput: &relationshipTLSActivationsInput,
		Type:                            typ,
	}
}

func CreateRelationshipsForTLSPrivateKeyInputRelationshipTLSDomainsInput(relationshipTLSDomainsInput RelationshipTLSDomainsInput) RelationshipsForTLSPrivateKeyInput {
	typ := RelationshipsForTLSPrivateKeyInputTypeRelationshipTLSDomainsInput

	return RelationshipsForTLSPrivateKeyInput{
		RelationshipTLSDomainsInput: &relationshipTLSDomainsInput,
		Type:                        typ,
	}
}

func (u *RelationshipsForTLSPrivateKeyInput) UnmarshalJSON(data []byte) error {

	relationshipTLSActivationsInput := RelationshipTLSActivationsInput{}
	if err := utils.UnmarshalJSON(data, &relationshipTLSActivationsInput, "", true, true); err == nil {
		u.RelationshipTLSActivationsInput = &relationshipTLSActivationsInput
		u.Type = RelationshipsForTLSPrivateKeyInputTypeRelationshipTLSActivationsInput
		return nil
	}

	relationshipTLSDomainsInput := RelationshipTLSDomainsInput{}
	if err := utils.UnmarshalJSON(data, &relationshipTLSDomainsInput, "", true, true); err == nil {
		u.RelationshipTLSDomainsInput = &relationshipTLSDomainsInput
		u.Type = RelationshipsForTLSPrivateKeyInputTypeRelationshipTLSDomainsInput
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RelationshipsForTLSPrivateKeyInput) MarshalJSON() ([]byte, error) {
	if u.RelationshipTLSActivationsInput != nil {
		return utils.MarshalJSON(u.RelationshipTLSActivationsInput, "", true)
	}

	if u.RelationshipTLSDomainsInput != nil {
		return utils.MarshalJSON(u.RelationshipTLSDomainsInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
