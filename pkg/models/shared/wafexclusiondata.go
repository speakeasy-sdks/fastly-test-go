// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/types"
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// WafExclusionDataAttributesExclusionType - The type of exclusion.
type WafExclusionDataAttributesExclusionType string

const (
	WafExclusionDataAttributesExclusionTypeRule     WafExclusionDataAttributesExclusionType = "rule"
	WafExclusionDataAttributesExclusionTypeVariable WafExclusionDataAttributesExclusionType = "variable"
	WafExclusionDataAttributesExclusionTypeWaf      WafExclusionDataAttributesExclusionType = "waf"
)

func (e WafExclusionDataAttributesExclusionType) ToPointer() *WafExclusionDataAttributesExclusionType {
	return &e
}

func (e *WafExclusionDataAttributesExclusionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rule":
		fallthrough
	case "variable":
		fallthrough
	case "waf":
		*e = WafExclusionDataAttributesExclusionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WafExclusionDataAttributesExclusionType: %v", v)
	}
}

// WafExclusionDataAttributesVariable - The variable to exclude. An optional selector can be specified after the variable separated by a colon (`:`) to restrict the variable to a particular parameter. Required for `exclusion_type=variable`.
type WafExclusionDataAttributesVariable string

const (
	WafExclusionDataAttributesVariableReqCookies             WafExclusionDataAttributesVariable = "req.cookies"
	WafExclusionDataAttributesVariableReqHeaders             WafExclusionDataAttributesVariable = "req.headers"
	WafExclusionDataAttributesVariableReqPost                WafExclusionDataAttributesVariable = "req.post"
	WafExclusionDataAttributesVariableReqPostFilename        WafExclusionDataAttributesVariable = "req.post_filename"
	WafExclusionDataAttributesVariableReqQs                  WafExclusionDataAttributesVariable = "req.qs"
	WafExclusionDataAttributesVariableLessThanNilGreaterThan WafExclusionDataAttributesVariable = "<nil>"
)

func (e WafExclusionDataAttributesVariable) ToPointer() *WafExclusionDataAttributesVariable {
	return &e
}

func (e *WafExclusionDataAttributesVariable) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "req.cookies":
		fallthrough
	case "req.headers":
		fallthrough
	case "req.post":
		fallthrough
	case "req.post_filename":
		fallthrough
	case "req.qs":
		fallthrough
	case "<nil>":
		*e = WafExclusionDataAttributesVariable(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WafExclusionDataAttributesVariable: %v", v)
	}
}

type WafExclusionDataAttributes struct {
	// A conditional expression in VCL used to determine if the condition is met.
	Condition *string `json:"condition,omitempty"`
	// The type of exclusion.
	ExclusionType *WafExclusionDataAttributesExclusionType `json:"exclusion_type,omitempty"`
	// Whether to generate a log upon matching.
	Logging *bool `default:"true" json:"logging"`
	// Name of the exclusion.
	Name *string `json:"name,omitempty"`
	// A numeric ID identifying a WAF exclusion.
	Number *int64 `json:"number,omitempty"`
	// The variable to exclude. An optional selector can be specified after the variable separated by a colon (`:`) to restrict the variable to a particular parameter. Required for `exclusion_type=variable`.
	Variable *WafExclusionDataAttributesVariable `json:"variable,omitempty"`
}

func (w WafExclusionDataAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WafExclusionDataAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WafExclusionDataAttributes) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *WafExclusionDataAttributes) GetExclusionType() *WafExclusionDataAttributesExclusionType {
	if o == nil {
		return nil
	}
	return o.ExclusionType
}

func (o *WafExclusionDataAttributes) GetLogging() *bool {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *WafExclusionDataAttributes) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *WafExclusionDataAttributes) GetNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *WafExclusionDataAttributes) GetVariable() *WafExclusionDataAttributesVariable {
	if o == nil {
		return nil
	}
	return o.Variable
}

type WafExclusionData struct {
	Attributes    *WafExclusionDataAttributes        `json:"attributes,omitempty"`
	Relationships *RelationshipsForWafExclusionInput `json:"relationships,omitempty"`
	// Resource type.
	type_ *string `const:"waf_exclusion" json:"type"`
}

func (w WafExclusionData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WafExclusionData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WafExclusionData) GetAttributes() *WafExclusionDataAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *WafExclusionData) GetRelationships() *RelationshipsForWafExclusionInput {
	if o == nil {
		return nil
	}
	return o.Relationships
}

func (o *WafExclusionData) GetType() *string {
	return types.String("waf_exclusion")
}
