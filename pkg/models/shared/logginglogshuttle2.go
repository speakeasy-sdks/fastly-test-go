// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LoggingLogshuttleFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingLogshuttleFormatVersion int64

const (
	LoggingLogshuttleFormatVersionOne LoggingLogshuttleFormatVersion = 1
	LoggingLogshuttleFormatVersionTwo LoggingLogshuttleFormatVersion = 2
)

func (e LoggingLogshuttleFormatVersion) ToPointer() *LoggingLogshuttleFormatVersion {
	return &e
}

func (e *LoggingLogshuttleFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingLogshuttleFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingLogshuttleFormatVersion: %v", v)
	}
}

// LoggingLogshuttlePlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingLogshuttlePlacement string

const (
	LoggingLogshuttlePlacementNone                   LoggingLogshuttlePlacement = "none"
	LoggingLogshuttlePlacementWafDebug               LoggingLogshuttlePlacement = "waf_debug"
	LoggingLogshuttlePlacementLessThanNilGreaterThan LoggingLogshuttlePlacement = "<nil>"
)

func (e LoggingLogshuttlePlacement) ToPointer() *LoggingLogshuttlePlacement {
	return &e
}

func (e *LoggingLogshuttlePlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingLogshuttlePlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingLogshuttlePlacement: %v", v)
	}
}

type LoggingLogshuttle2 struct {
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingLogshuttleFormatVersion `form:"name=format_version"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingLogshuttlePlacement `form:"name=placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// The data authentication token associated with this endpoint.
	Token *string `form:"name=token"`
	// The URL to stream logs to.
	URL *string `form:"name=url"`
}

func (o *LoggingLogshuttle2) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingLogshuttle2) GetFormatVersion() *LoggingLogshuttleFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingLogshuttle2) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingLogshuttle2) GetPlacement() *LoggingLogshuttlePlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingLogshuttle2) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingLogshuttle2) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *LoggingLogshuttle2) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
