// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PopBillingRegion - the region used for billing
type PopBillingRegion string

const (
	PopBillingRegionAfrica       PopBillingRegion = "Africa"
	PopBillingRegionAustralia    PopBillingRegion = "Australia"
	PopBillingRegionAsia         PopBillingRegion = "Asia"
	PopBillingRegionEurope       PopBillingRegion = "Europe"
	PopBillingRegionIndia        PopBillingRegion = "India"
	PopBillingRegionNorthAmerica PopBillingRegion = "North America"
	PopBillingRegionSouthKorea   PopBillingRegion = "South Korea"
	PopBillingRegionSouthAmerica PopBillingRegion = "South America"
)

func (e PopBillingRegion) ToPointer() *PopBillingRegion {
	return &e
}

func (e *PopBillingRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Africa":
		fallthrough
	case "Australia":
		fallthrough
	case "Asia":
		fallthrough
	case "Europe":
		fallthrough
	case "India":
		fallthrough
	case "North America":
		fallthrough
	case "South Korea":
		fallthrough
	case "South America":
		*e = PopBillingRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PopBillingRegion: %v", v)
	}
}

// PopCoordinates - the geographic location of the POP
type PopCoordinates struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (o *PopCoordinates) GetLatitude() float64 {
	if o == nil {
		return 0.0
	}
	return o.Latitude
}

func (o *PopCoordinates) GetLongitude() float64 {
	if o == nil {
		return 0.0
	}
	return o.Longitude
}

type PopRegion string

const (
	PopRegionApac         PopRegion = "APAC"
	PopRegionAsia         PopRegion = "Asia"
	PopRegionAfWest       PopRegion = "AF-West"
	PopRegionEuCentral    PopRegion = "EU-Central"
	PopRegionEuEast       PopRegion = "EU-East"
	PopRegionEuWest       PopRegion = "EU-West"
	PopRegionMiddleEast   PopRegion = "Middle-East"
	PopRegionNorthAmerica PopRegion = "North-America"
	PopRegionSaSouth      PopRegion = "SA-South"
	PopRegionSaEast       PopRegion = "SA-East"
	PopRegionSaWest       PopRegion = "SA-West"
	PopRegionSaNorth      PopRegion = "SA-North"
	PopRegionSouthAfrica  PopRegion = "South-Africa"
	PopRegionSouthAmerica PopRegion = "South-America"
	PopRegionUsCentral    PopRegion = "US-Central"
	PopRegionUsEast       PopRegion = "US-East"
	PopRegionUsWest       PopRegion = "US-West"
	PopRegionAsiaSouth    PopRegion = "Asia-South"
)

func (e PopRegion) ToPointer() *PopRegion {
	return &e
}

func (e *PopRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APAC":
		fallthrough
	case "Asia":
		fallthrough
	case "AF-West":
		fallthrough
	case "EU-Central":
		fallthrough
	case "EU-East":
		fallthrough
	case "EU-West":
		fallthrough
	case "Middle-East":
		fallthrough
	case "North-America":
		fallthrough
	case "SA-South":
		fallthrough
	case "SA-East":
		fallthrough
	case "SA-West":
		fallthrough
	case "SA-North":
		fallthrough
	case "South-Africa":
		fallthrough
	case "South-America":
		fallthrough
	case "US-Central":
		fallthrough
	case "US-East":
		fallthrough
	case "US-West":
		fallthrough
	case "Asia-South":
		*e = PopRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PopRegion: %v", v)
	}
}

// PopStatsRegion - the region used for stats reporting
type PopStatsRegion string

const (
	PopStatsRegionSouthamericaStd PopStatsRegion = "southamerica_std"
	PopStatsRegionAfricaStd       PopStatsRegion = "africa_std"
	PopStatsRegionAnzac           PopStatsRegion = "anzac"
	PopStatsRegionAsia            PopStatsRegion = "asia"
	PopStatsRegionEurope          PopStatsRegion = "europe"
	PopStatsRegionUsa             PopStatsRegion = "usa"
	PopStatsRegionAsiaIndia       PopStatsRegion = "asia_india"
	PopStatsRegionAsiaSouthkorea  PopStatsRegion = "asia_southkorea"
)

func (e PopStatsRegion) ToPointer() *PopStatsRegion {
	return &e
}

func (e *PopStatsRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "southamerica_std":
		fallthrough
	case "africa_std":
		fallthrough
	case "anzac":
		fallthrough
	case "asia":
		fallthrough
	case "europe":
		fallthrough
	case "usa":
		fallthrough
	case "asia_india":
		fallthrough
	case "asia_southkorea":
		*e = PopStatsRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PopStatsRegion: %v", v)
	}
}

type Pop struct {
	// the region used for billing
	BillingRegion PopBillingRegion `json:"billing_region"`
	// the three-letter code for the [POP](https://developer.fastly.com/learning/concepts/pop/)
	Code string `json:"code"`
	// the geographic location of the POP
	Coordinates *PopCoordinates `json:"coordinates,omitempty"`
	Group       string          `json:"group"`
	// the name of the POP
	Name   string    `json:"name"`
	Region PopRegion `json:"region"`
	// the name of the [shield code](https://developer.fastly.com/learning/concepts/shielding/#choosing-a-shield-location) if this POP is suitable for shielding
	Shield *string `json:"shield,omitempty"`
	// the region used for stats reporting
	StatsRegion PopStatsRegion `json:"stats_region"`
}

func (o *Pop) GetBillingRegion() PopBillingRegion {
	if o == nil {
		return PopBillingRegion("")
	}
	return o.BillingRegion
}

func (o *Pop) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *Pop) GetCoordinates() *PopCoordinates {
	if o == nil {
		return nil
	}
	return o.Coordinates
}

func (o *Pop) GetGroup() string {
	if o == nil {
		return ""
	}
	return o.Group
}

func (o *Pop) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Pop) GetRegion() PopRegion {
	if o == nil {
		return PopRegion("")
	}
	return o.Region
}

func (o *Pop) GetShield() *string {
	if o == nil {
		return nil
	}
	return o.Shield
}

func (o *Pop) GetStatsRegion() PopStatsRegion {
	if o == nil {
		return PopStatsRegion("")
	}
	return o.StatsRegion
}
