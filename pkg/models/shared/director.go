// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DirectorType - What type of load balance group to use.
type DirectorType int64

const (
	DirectorTypeOne   DirectorType = 1
	DirectorTypeThree DirectorType = 3
	DirectorTypeFour  DirectorType = 4
)

func (e DirectorType) ToPointer() *DirectorType {
	return &e
}

func (e *DirectorType) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = DirectorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectorType: %v", v)
	}
}

type Director struct {
	// List of backends associated to a director.
	Backends []Backend `json:"backends,omitempty" form:"name=backends,json"`
	// Unused.
	Capacity *int64 `json:"capacity,omitempty" form:"name=capacity"`
	// A freeform descriptive note.
	Comment *string `json:"comment,omitempty" form:"name=comment"`
	// Name for the Director.
	Name *string `json:"name,omitempty" form:"name=name"`
	// The percentage of capacity that needs to be up for a director to be considered up. `0` to `100`.
	Quorum *int64 `json:"quorum,omitempty" form:"name=quorum"`
	// How many backends to search if it fails.
	Retries *int64 `json:"retries,omitempty" form:"name=retries"`
	// Selected POP to serve as a shield for the backends. Defaults to `null` meaning no origin shielding if not set. Refer to the [POPs API endpoint](/reference/api/utils/pops/) to get a list of available POPs used for shielding.
	Shield *string `json:"shield,omitempty" form:"name=shield"`
	// What type of load balance group to use.
	Type *DirectorType `json:"type,omitempty" form:"name=type"`
}
