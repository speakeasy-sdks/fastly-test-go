// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LoggingDatadogFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingDatadogFormatVersion int64

const (
	LoggingDatadogFormatVersionOne LoggingDatadogFormatVersion = 1
	LoggingDatadogFormatVersionTwo LoggingDatadogFormatVersion = 2
)

func (e LoggingDatadogFormatVersion) ToPointer() *LoggingDatadogFormatVersion {
	return &e
}

func (e *LoggingDatadogFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingDatadogFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDatadogFormatVersion: %v", v)
	}
}

// LoggingDatadogPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingDatadogPlacement string

const (
	LoggingDatadogPlacementNone                   LoggingDatadogPlacement = "none"
	LoggingDatadogPlacementWafDebug               LoggingDatadogPlacement = "waf_debug"
	LoggingDatadogPlacementLessThanNilGreaterThan LoggingDatadogPlacement = "<nil>"
)

func (e LoggingDatadogPlacement) ToPointer() *LoggingDatadogPlacement {
	return &e
}

func (e *LoggingDatadogPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingDatadogPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDatadogPlacement: %v", v)
	}
}

// LoggingDatadogRegion - The region that log data will be sent to.
type LoggingDatadogRegion string

const (
	LoggingDatadogRegionUs LoggingDatadogRegion = "US"
	LoggingDatadogRegionEu LoggingDatadogRegion = "EU"
)

func (e LoggingDatadogRegion) ToPointer() *LoggingDatadogRegion {
	return &e
}

func (e *LoggingDatadogRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "US":
		fallthrough
	case "EU":
		*e = LoggingDatadogRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDatadogRegion: %v", v)
	}
}

type LoggingDatadog3 struct {
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Datadog can ingest.
	//
	Format *string `form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingDatadogFormatVersion `form:"name=format_version"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingDatadogPlacement `form:"name=placement"`
	// The region that log data will be sent to.
	Region *LoggingDatadogRegion `form:"name=region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// The API key from your Datadog account. Required.
	Token *string `form:"name=token"`
}

func (o *LoggingDatadog3) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingDatadog3) GetFormatVersion() *LoggingDatadogFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingDatadog3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingDatadog3) GetPlacement() *LoggingDatadogPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingDatadog3) GetRegion() *LoggingDatadogRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *LoggingDatadog3) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingDatadog3) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}
