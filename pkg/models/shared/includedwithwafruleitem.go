// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"errors"
)

type IncludedWithWafRuleItemType string

const (
	IncludedWithWafRuleItemTypeWafTag          IncludedWithWafRuleItemType = "waf_tag"
	IncludedWithWafRuleItemTypeWafRuleRevision IncludedWithWafRuleItemType = "waf_rule_revision"
)

type IncludedWithWafRuleItem struct {
	WafTag          *WafTag
	WafRuleRevision *WafRuleRevision

	Type IncludedWithWafRuleItemType
}

func CreateIncludedWithWafRuleItemWafTag(wafTag WafTag) IncludedWithWafRuleItem {
	typ := IncludedWithWafRuleItemTypeWafTag

	return IncludedWithWafRuleItem{
		WafTag: &wafTag,
		Type:   typ,
	}
}

func CreateIncludedWithWafRuleItemWafRuleRevision(wafRuleRevision WafRuleRevision) IncludedWithWafRuleItem {
	typ := IncludedWithWafRuleItemTypeWafRuleRevision

	return IncludedWithWafRuleItem{
		WafRuleRevision: &wafRuleRevision,
		Type:            typ,
	}
}

func (u *IncludedWithWafRuleItem) UnmarshalJSON(data []byte) error {

	wafTag := WafTag{}
	if err := utils.UnmarshalJSON(data, &wafTag, "", true, true); err == nil {
		u.WafTag = &wafTag
		u.Type = IncludedWithWafRuleItemTypeWafTag
		return nil
	}

	wafRuleRevision := WafRuleRevision{}
	if err := utils.UnmarshalJSON(data, &wafRuleRevision, "", true, true); err == nil {
		u.WafRuleRevision = &wafRuleRevision
		u.Type = IncludedWithWafRuleItemTypeWafRuleRevision
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IncludedWithWafRuleItem) MarshalJSON() ([]byte, error) {
	if u.WafTag != nil {
		return utils.MarshalJSON(u.WafTag, "", true)
	}

	if u.WafRuleRevision != nil {
		return utils.MarshalJSON(u.WafRuleRevision, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
