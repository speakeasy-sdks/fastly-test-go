// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// LoggingFtpResponseCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingFtpResponseCompressionCodec string

const (
	LoggingFtpResponseCompressionCodecZstd   LoggingFtpResponseCompressionCodec = "zstd"
	LoggingFtpResponseCompressionCodecSnappy LoggingFtpResponseCompressionCodec = "snappy"
	LoggingFtpResponseCompressionCodecGzip   LoggingFtpResponseCompressionCodec = "gzip"
)

func (e LoggingFtpResponseCompressionCodec) ToPointer() *LoggingFtpResponseCompressionCodec {
	return &e
}

func (e *LoggingFtpResponseCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingFtpResponseCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpResponseCompressionCodec: %v", v)
	}
}

// LoggingFtpResponseFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingFtpResponseFormatVersion int64

const (
	LoggingFtpResponseFormatVersionOne LoggingFtpResponseFormatVersion = 1
	LoggingFtpResponseFormatVersionTwo LoggingFtpResponseFormatVersion = 2
)

func (e LoggingFtpResponseFormatVersion) ToPointer() *LoggingFtpResponseFormatVersion {
	return &e
}

func (e *LoggingFtpResponseFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingFtpResponseFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpResponseFormatVersion: %v", v)
	}
}

// LoggingFtpResponseMessageType - How the message should be formatted.
type LoggingFtpResponseMessageType string

const (
	LoggingFtpResponseMessageTypeClassic LoggingFtpResponseMessageType = "classic"
	LoggingFtpResponseMessageTypeLoggly  LoggingFtpResponseMessageType = "loggly"
	LoggingFtpResponseMessageTypeLogplex LoggingFtpResponseMessageType = "logplex"
	LoggingFtpResponseMessageTypeBlank   LoggingFtpResponseMessageType = "blank"
)

func (e LoggingFtpResponseMessageType) ToPointer() *LoggingFtpResponseMessageType {
	return &e
}

func (e *LoggingFtpResponseMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingFtpResponseMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpResponseMessageType: %v", v)
	}
}

// LoggingFtpResponsePlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingFtpResponsePlacement string

const (
	LoggingFtpResponsePlacementNone                   LoggingFtpResponsePlacement = "none"
	LoggingFtpResponsePlacementWafDebug               LoggingFtpResponsePlacement = "waf_debug"
	LoggingFtpResponsePlacementLessThanNilGreaterThan LoggingFtpResponsePlacement = "<nil>"
)

func (e LoggingFtpResponsePlacement) ToPointer() *LoggingFtpResponsePlacement {
	return &e
}

func (e *LoggingFtpResponsePlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingFtpResponsePlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpResponsePlacement: %v", v)
	}
}

// LoggingFtpResponse - OK
type LoggingFtpResponse struct {
	// An hostname or IPv4 address.
	Address *string `json:"address,omitempty"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingFtpResponseCompressionCodec `json:"compression_codec,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `json:"format,omitempty"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingFtpResponseFormatVersion `json:"format_version,omitempty"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `json:"gzip_level,omitempty"`
	// Hostname used.
	Hostname *string `json:"hostname,omitempty"`
	// IPv4 address of the host.
	Ipv4 *string `json:"ipv4,omitempty"`
	// How the message should be formatted.
	MessageType *LoggingFtpResponseMessageType `json:"message_type,omitempty"`
	// The name for the real-time logging configuration.
	Name *string `json:"name,omitempty"`
	// The password for the server. For anonymous use an email address.
	Password *string `json:"password,omitempty"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory.
	Path *string `json:"path,omitempty"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `json:"period,omitempty"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingFtpResponsePlacement `json:"placement,omitempty"`
	// The port number.
	Port *int64 `json:"port,omitempty"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `json:"public_key,omitempty"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `json:"response_condition,omitempty"`
	ServiceID         *string `json:"service_id,omitempty"`
	// A timestamp format
	TimestampFormat *string `json:"timestamp_format,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The username for the server. Can be anonymous.
	User    *string `json:"user,omitempty"`
	Version *int64  `json:"version,omitempty"`
}
