// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type BillingResponseRegionsTiers struct {
	Name  *string  `json:"name,omitempty"`
	Price *float64 `json:"price,omitempty"`
	Total *float64 `json:"total,omitempty"`
	Units *float64 `json:"units,omitempty"`
}

func (o *BillingResponseRegionsTiers) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *BillingResponseRegionsTiers) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *BillingResponseRegionsTiers) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *BillingResponseRegionsTiers) GetUnits() *float64 {
	if o == nil {
		return nil
	}
	return o.Units
}

type BillingResponseRegions struct {
	Tiers []BillingResponseRegionsTiers `json:"tiers,omitempty"`
	Total *float64                      `json:"total,omitempty"`
}

func (o *BillingResponseRegions) GetTiers() []BillingResponseRegionsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *BillingResponseRegions) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

// BillingResponseStatusStatus - What the current status of this invoice can be.
type BillingResponseStatusStatus string

const (
	BillingResponseStatusStatusPending     BillingResponseStatusStatus = "Pending"
	BillingResponseStatusStatusOutstanding BillingResponseStatusStatus = "Outstanding"
	BillingResponseStatusStatusPaid        BillingResponseStatusStatus = "Paid"
	BillingResponseStatusStatusMtd         BillingResponseStatusStatus = "MTD"
)

func (e BillingResponseStatusStatus) ToPointer() *BillingResponseStatusStatus {
	return &e
}

func (e *BillingResponseStatusStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pending":
		fallthrough
	case "Outstanding":
		fallthrough
	case "Paid":
		fallthrough
	case "MTD":
		*e = BillingResponseStatusStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingResponseStatusStatus: %v", v)
	}
}

type BillingResponseStatus struct {
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SentAt *time.Time `json:"sent_at,omitempty"`
	// What the current status of this invoice can be.
	Status *BillingResponseStatusStatus `json:"status,omitempty"`
}

func (o *BillingResponseStatus) GetSentAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SentAt
}

func (o *BillingResponseStatus) GetStatus() *BillingResponseStatusStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type BillingResponseTotalExtras struct {
	// The name of this extra cost.
	Name *string `json:"name,omitempty"`
	// Recurring monthly cost in USD. Not present if $0.0.
	Recurring *float64 `json:"recurring,omitempty"`
	// Initial set up cost in USD. Not present if $0.0 or this is not the month the extra was added.
	Setup *float64 `json:"setup,omitempty"`
}

func (o *BillingResponseTotalExtras) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *BillingResponseTotalExtras) GetRecurring() *float64 {
	if o == nil {
		return nil
	}
	return o.Recurring
}

func (o *BillingResponseTotalExtras) GetSetup() *float64 {
	if o == nil {
		return nil
	}
	return o.Setup
}

// BillingResponseTotal - Complete summary of the billing information.
type BillingResponseTotal struct {
	// The total amount of bandwidth used this month (See bandwidth_units for measurement).
	Bandwidth *float64 `json:"bandwidth,omitempty"`
	// The cost of the bandwidth used this month in USD.
	BandwidthCost *float64 `json:"bandwidth_cost,omitempty"`
	// Bandwidth measurement units based on billing plan.
	BandwidthUnits *string `json:"bandwidth_units,omitempty"`
	// The final amount to be paid.
	Cost *float64 `json:"cost,omitempty"`
	// Total incurred cost plus extras cost.
	CostBeforeDiscount *float64 `json:"cost_before_discount,omitempty"`
	// Calculated discount rate.
	Discount *float64 `json:"discount,omitempty"`
	// A list of any extras for this invoice.
	Extras []BillingResponseTotalExtras `json:"extras,omitempty"`
	// Total cost of all extras.
	ExtrasCost *float64 `json:"extras_cost,omitempty"`
	// The total cost of bandwidth and requests used this month.
	IncurredCost *float64 `json:"incurred_cost,omitempty"`
	// How much over the plan minimum has been incurred.
	Overage *float64 `json:"overage,omitempty"`
	// The short code the plan this invoice was generated under.
	PlanCode *string `json:"plan_code,omitempty"`
	// The minimum cost of this plan.
	PlanMinimum *float64 `json:"plan_minimum,omitempty"`
	// The name of the plan this invoice was generated under.
	PlanName *string `json:"plan_name,omitempty"`
	// The total number of requests used this month.
	Requests *float64 `json:"requests,omitempty"`
	// The cost of the requests used this month.
	RequestsCost *float64 `json:"requests_cost,omitempty"`
	// Payment terms. Almost always Net15.
	Terms *string `json:"terms,omitempty"`
}

func (o *BillingResponseTotal) GetBandwidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Bandwidth
}

func (o *BillingResponseTotal) GetBandwidthCost() *float64 {
	if o == nil {
		return nil
	}
	return o.BandwidthCost
}

func (o *BillingResponseTotal) GetBandwidthUnits() *string {
	if o == nil {
		return nil
	}
	return o.BandwidthUnits
}

func (o *BillingResponseTotal) GetCost() *float64 {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *BillingResponseTotal) GetCostBeforeDiscount() *float64 {
	if o == nil {
		return nil
	}
	return o.CostBeforeDiscount
}

func (o *BillingResponseTotal) GetDiscount() *float64 {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *BillingResponseTotal) GetExtras() []BillingResponseTotalExtras {
	if o == nil {
		return nil
	}
	return o.Extras
}

func (o *BillingResponseTotal) GetExtrasCost() *float64 {
	if o == nil {
		return nil
	}
	return o.ExtrasCost
}

func (o *BillingResponseTotal) GetIncurredCost() *float64 {
	if o == nil {
		return nil
	}
	return o.IncurredCost
}

func (o *BillingResponseTotal) GetOverage() *float64 {
	if o == nil {
		return nil
	}
	return o.Overage
}

func (o *BillingResponseTotal) GetPlanCode() *string {
	if o == nil {
		return nil
	}
	return o.PlanCode
}

func (o *BillingResponseTotal) GetPlanMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.PlanMinimum
}

func (o *BillingResponseTotal) GetPlanName() *string {
	if o == nil {
		return nil
	}
	return o.PlanName
}

func (o *BillingResponseTotal) GetRequests() *float64 {
	if o == nil {
		return nil
	}
	return o.Requests
}

func (o *BillingResponseTotal) GetRequestsCost() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestsCost
}

func (o *BillingResponseTotal) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

// BillingResponse - OK
type BillingResponse struct {
	CustomerID *string `json:"customer_id,omitempty"`
	// Date and time in ISO 8601 format.
	EndTime   *time.Time                `json:"end_time,omitempty"`
	InvoiceID *string                   `json:"invoice_id,omitempty"`
	LineItems []BillingResponseLineItem `json:"line_items,omitempty"`
	// Breakdown of regional data for products that are region based.
	Regions map[string]map[string]BillingResponseRegions `json:"regions,omitempty"`
	// Date and time in ISO 8601 format.
	StartTime *time.Time             `json:"start_time,omitempty"`
	Status    *BillingResponseStatus `json:"status,omitempty"`
	// Complete summary of the billing information.
	Total *BillingResponseTotal `json:"total,omitempty"`
	// The current state of our third-party billing vendor. One of `up` or `down`.
	VendorState *string `json:"vendor_state,omitempty"`
}

func (o *BillingResponse) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *BillingResponse) GetEndTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndTime
}

func (o *BillingResponse) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *BillingResponse) GetLineItems() []BillingResponseLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *BillingResponse) GetRegions() map[string]map[string]BillingResponseRegions {
	if o == nil {
		return nil
	}
	return o.Regions
}

func (o *BillingResponse) GetStartTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *BillingResponse) GetStatus() *BillingResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BillingResponse) GetTotal() *BillingResponseTotal {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *BillingResponse) GetVendorState() *string {
	if o == nil {
		return nil
	}
	return o.VendorState
}
