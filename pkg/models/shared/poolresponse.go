// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// PoolResponseType - What type of load balance group to use.
type PoolResponseType string

const (
	PoolResponseTypeRandom PoolResponseType = "random"
	PoolResponseTypeHash   PoolResponseType = "hash"
	PoolResponseTypeClient PoolResponseType = "client"
)

func (e PoolResponseType) ToPointer() *PoolResponseType {
	return &e
}

func (e *PoolResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "random":
		fallthrough
	case "hash":
		fallthrough
	case "client":
		*e = PoolResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolResponseType: %v", v)
	}
}

// PoolResponseUseTLS - Whether to use TLS.
type PoolResponseUseTLS int64

const (
	PoolResponseUseTLSZero PoolResponseUseTLS = 0
	PoolResponseUseTLSOne  PoolResponseUseTLS = 1
)

func (e PoolResponseUseTLS) ToPointer() *PoolResponseUseTLS {
	return &e
}

func (e *PoolResponseUseTLS) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = PoolResponseUseTLS(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolResponseUseTLS: %v", v)
	}
}

// PoolResponse - OK
type PoolResponse struct {
	// A freeform descriptive note.
	Comment *string `json:"comment,omitempty"`
	// How long to wait for a timeout in milliseconds. Optional.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// How long to wait for the first byte in milliseconds. Optional.
	FirstByteTimeout *int64 `json:"first_byte_timeout,omitempty"`
	// Name of the healthcheck to use with this pool. Can be empty and could be reused across multiple backend and pools.
	Healthcheck *string `json:"healthcheck,omitempty"`
	ID          *string `json:"id,omitempty"`
	// Maximum number of connections. Optional.
	MaxConnDefault *int64 `json:"max_conn_default,omitempty"`
	// Maximum allowed TLS version on connections to this server. Optional.
	MaxTLSVersion *int64 `json:"max_tls_version,omitempty"`
	// Minimum allowed TLS version on connections to this server. Optional.
	MinTLSVersion *int64 `json:"min_tls_version,omitempty"`
	// Name for the Pool.
	Name *string `json:"name,omitempty"`
	// The hostname to [override the Host header](https://docs.fastly.com/en/guides/specifying-an-override-host). Defaults to `null` meaning no override of the Host header will occur. This setting can also be added to a Server definition. If the field is set on a Server definition it will override the Pool setting.
	OverrideHost *string `json:"override_host,omitempty"`
	// Percentage of capacity (`0-100`) that needs to be operationally available for a pool to be considered up.
	Quorum *int64 `json:"quorum,omitempty"`
	// Condition which, if met, will select this configuration during a request. Optional.
	RequestCondition *string `json:"request_condition,omitempty"`
	ServiceID        *string `json:"service_id,omitempty"`
	// Selected POP to serve as a shield for the servers. Defaults to `null` meaning no origin shielding if not set. Refer to the [POPs API endpoint](/reference/api/utils/pops/) to get a list of available POPs used for shielding.
	Shield *string `json:"shield,omitempty"`
	// A secure certificate to authenticate a server with. Must be in PEM format.
	TLSCaCert *string `json:"tls_ca_cert,omitempty"`
	// The hostname used to verify a server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN).
	TLSCertHostname *string `json:"tls_cert_hostname,omitempty"`
	// Be strict on checking TLS certs. Optional.
	TLSCheckCert *int64 `json:"tls_check_cert,omitempty"`
	// List of OpenSSL ciphers (see the [openssl.org manpages](https://www.openssl.org/docs/man1.1.1/man1/ciphers.html) for details). Optional.
	TLSCiphers *string `json:"tls_ciphers,omitempty"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TLSClientCert *string `json:"tls_client_cert,omitempty"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TLSClientKey *string `json:"tls_client_key,omitempty"`
	// SNI hostname. Optional.
	TLSSniHostname *string `json:"tls_sni_hostname,omitempty"`
	// What type of load balance group to use.
	Type *PoolResponseType `json:"type,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Whether to use TLS.
	UseTLS  *PoolResponseUseTLS `json:"use_tls,omitempty"`
	Version *int64              `json:"version,omitempty"`
}
