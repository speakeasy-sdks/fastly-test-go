// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SchemasSnippetResponseDynamic - Sets the snippet version.
type SchemasSnippetResponseDynamic int64

const (
	SchemasSnippetResponseDynamicZero SchemasSnippetResponseDynamic = 0
	SchemasSnippetResponseDynamicOne  SchemasSnippetResponseDynamic = 1
)

func (e SchemasSnippetResponseDynamic) ToPointer() *SchemasSnippetResponseDynamic {
	return &e
}

func (e *SchemasSnippetResponseDynamic) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = SchemasSnippetResponseDynamic(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasSnippetResponseDynamic: %v", v)
	}
}

// SchemasSnippetResponseType - The location in generated VCL where the snippet should be placed.
type SchemasSnippetResponseType string

const (
	SchemasSnippetResponseTypeInit    SchemasSnippetResponseType = "init"
	SchemasSnippetResponseTypeRecv    SchemasSnippetResponseType = "recv"
	SchemasSnippetResponseTypeHash    SchemasSnippetResponseType = "hash"
	SchemasSnippetResponseTypeHit     SchemasSnippetResponseType = "hit"
	SchemasSnippetResponseTypeMiss    SchemasSnippetResponseType = "miss"
	SchemasSnippetResponseTypePass    SchemasSnippetResponseType = "pass"
	SchemasSnippetResponseTypeFetch   SchemasSnippetResponseType = "fetch"
	SchemasSnippetResponseTypeError   SchemasSnippetResponseType = "error"
	SchemasSnippetResponseTypeDeliver SchemasSnippetResponseType = "deliver"
	SchemasSnippetResponseTypeLog     SchemasSnippetResponseType = "log"
	SchemasSnippetResponseTypeNone    SchemasSnippetResponseType = "none"
)

func (e SchemasSnippetResponseType) ToPointer() *SchemasSnippetResponseType {
	return &e
}

func (e *SchemasSnippetResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "recv":
		fallthrough
	case "hash":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "pass":
		fallthrough
	case "fetch":
		fallthrough
	case "error":
		fallthrough
	case "deliver":
		fallthrough
	case "log":
		fallthrough
	case "none":
		*e = SchemasSnippetResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasSnippetResponseType: %v", v)
	}
}

type SchemasSnippetResponse struct {
	// The VCL code that specifies exactly what the snippet does.
	Content *string `json:"content,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Sets the snippet version.
	Dynamic *SchemasSnippetResponseDynamic `json:"dynamic,omitempty"`
	ID      *string                        `json:"id,omitempty"`
	// The name for the snippet.
	Name *string `json:"name,omitempty"`
	// Priority determines execution order. Lower numbers execute first.
	Priority  *string `json:"priority,omitempty"`
	ServiceID *string `json:"service_id,omitempty"`
	// The location in generated VCL where the snippet should be placed.
	Type *SchemasSnippetResponseType `json:"type,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// String representing the number identifying a version of the service.
	Version *string `json:"version,omitempty"`
}

func (o *SchemasSnippetResponse) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *SchemasSnippetResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SchemasSnippetResponse) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *SchemasSnippetResponse) GetDynamic() *SchemasSnippetResponseDynamic {
	if o == nil {
		return nil
	}
	return o.Dynamic
}

func (o *SchemasSnippetResponse) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SchemasSnippetResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SchemasSnippetResponse) GetPriority() *string {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *SchemasSnippetResponse) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *SchemasSnippetResponse) GetType() *SchemasSnippetResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SchemasSnippetResponse) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *SchemasSnippetResponse) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}
