// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// LoggingOpenstackResponseCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingOpenstackResponseCompressionCodec string

const (
	LoggingOpenstackResponseCompressionCodecZstd   LoggingOpenstackResponseCompressionCodec = "zstd"
	LoggingOpenstackResponseCompressionCodecSnappy LoggingOpenstackResponseCompressionCodec = "snappy"
	LoggingOpenstackResponseCompressionCodecGzip   LoggingOpenstackResponseCompressionCodec = "gzip"
)

func (e LoggingOpenstackResponseCompressionCodec) ToPointer() *LoggingOpenstackResponseCompressionCodec {
	return &e
}

func (e *LoggingOpenstackResponseCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingOpenstackResponseCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackResponseCompressionCodec: %v", v)
	}
}

// LoggingOpenstackResponseFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingOpenstackResponseFormatVersion int64

const (
	LoggingOpenstackResponseFormatVersionOne LoggingOpenstackResponseFormatVersion = 1
	LoggingOpenstackResponseFormatVersionTwo LoggingOpenstackResponseFormatVersion = 2
)

func (e LoggingOpenstackResponseFormatVersion) ToPointer() *LoggingOpenstackResponseFormatVersion {
	return &e
}

func (e *LoggingOpenstackResponseFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingOpenstackResponseFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackResponseFormatVersion: %v", v)
	}
}

// LoggingOpenstackResponseMessageType - How the message should be formatted.
type LoggingOpenstackResponseMessageType string

const (
	LoggingOpenstackResponseMessageTypeClassic LoggingOpenstackResponseMessageType = "classic"
	LoggingOpenstackResponseMessageTypeLoggly  LoggingOpenstackResponseMessageType = "loggly"
	LoggingOpenstackResponseMessageTypeLogplex LoggingOpenstackResponseMessageType = "logplex"
	LoggingOpenstackResponseMessageTypeBlank   LoggingOpenstackResponseMessageType = "blank"
)

func (e LoggingOpenstackResponseMessageType) ToPointer() *LoggingOpenstackResponseMessageType {
	return &e
}

func (e *LoggingOpenstackResponseMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingOpenstackResponseMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackResponseMessageType: %v", v)
	}
}

// LoggingOpenstackResponsePlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingOpenstackResponsePlacement string

const (
	LoggingOpenstackResponsePlacementNone                   LoggingOpenstackResponsePlacement = "none"
	LoggingOpenstackResponsePlacementWafDebug               LoggingOpenstackResponsePlacement = "waf_debug"
	LoggingOpenstackResponsePlacementLessThanNilGreaterThan LoggingOpenstackResponsePlacement = "<nil>"
)

func (e LoggingOpenstackResponsePlacement) ToPointer() *LoggingOpenstackResponsePlacement {
	return &e
}

func (e *LoggingOpenstackResponsePlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingOpenstackResponsePlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackResponsePlacement: %v", v)
	}
}

// LoggingOpenstackResponse - OK
type LoggingOpenstackResponse struct {
	// Your OpenStack account access key.
	AccessKey *string `json:"access_key,omitempty"`
	// The name of your OpenStack container.
	BucketName *string `json:"bucket_name,omitempty"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingOpenstackResponseCompressionCodec `json:"compression_codec,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `json:"format,omitempty"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingOpenstackResponseFormatVersion `json:"format_version,omitempty"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `json:"gzip_level,omitempty"`
	// How the message should be formatted.
	MessageType *LoggingOpenstackResponseMessageType `json:"message_type,omitempty"`
	// The name for the real-time logging configuration.
	Name *string `json:"name,omitempty"`
	// The path to upload logs to.
	Path *string `json:"path,omitempty"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `json:"period,omitempty"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingOpenstackResponsePlacement `json:"placement,omitempty"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `json:"public_key,omitempty"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `json:"response_condition,omitempty"`
	ServiceID         *string `json:"service_id,omitempty"`
	// A timestamp format
	TimestampFormat *string `json:"timestamp_format,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Your OpenStack auth url.
	URL *string `json:"url,omitempty"`
	// The username for your OpenStack account.
	User    *string `json:"user,omitempty"`
	Version *int64  `json:"version,omitempty"`
}
