// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LoggingOpenstackCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingOpenstackCompressionCodec string

const (
	LoggingOpenstackCompressionCodecZstd   LoggingOpenstackCompressionCodec = "zstd"
	LoggingOpenstackCompressionCodecSnappy LoggingOpenstackCompressionCodec = "snappy"
	LoggingOpenstackCompressionCodecGzip   LoggingOpenstackCompressionCodec = "gzip"
)

func (e LoggingOpenstackCompressionCodec) ToPointer() *LoggingOpenstackCompressionCodec {
	return &e
}

func (e *LoggingOpenstackCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingOpenstackCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackCompressionCodec: %v", v)
	}
}

// LoggingOpenstackFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingOpenstackFormatVersion int64

const (
	LoggingOpenstackFormatVersionOne LoggingOpenstackFormatVersion = 1
	LoggingOpenstackFormatVersionTwo LoggingOpenstackFormatVersion = 2
)

func (e LoggingOpenstackFormatVersion) ToPointer() *LoggingOpenstackFormatVersion {
	return &e
}

func (e *LoggingOpenstackFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingOpenstackFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackFormatVersion: %v", v)
	}
}

// LoggingOpenstackMessageType - How the message should be formatted.
type LoggingOpenstackMessageType string

const (
	LoggingOpenstackMessageTypeClassic LoggingOpenstackMessageType = "classic"
	LoggingOpenstackMessageTypeLoggly  LoggingOpenstackMessageType = "loggly"
	LoggingOpenstackMessageTypeLogplex LoggingOpenstackMessageType = "logplex"
	LoggingOpenstackMessageTypeBlank   LoggingOpenstackMessageType = "blank"
)

func (e LoggingOpenstackMessageType) ToPointer() *LoggingOpenstackMessageType {
	return &e
}

func (e *LoggingOpenstackMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingOpenstackMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackMessageType: %v", v)
	}
}

// LoggingOpenstackPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingOpenstackPlacement string

const (
	LoggingOpenstackPlacementNone                   LoggingOpenstackPlacement = "none"
	LoggingOpenstackPlacementWafDebug               LoggingOpenstackPlacement = "waf_debug"
	LoggingOpenstackPlacementLessThanNilGreaterThan LoggingOpenstackPlacement = "<nil>"
)

func (e LoggingOpenstackPlacement) ToPointer() *LoggingOpenstackPlacement {
	return &e
}

func (e *LoggingOpenstackPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingOpenstackPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingOpenstackPlacement: %v", v)
	}
}

type LoggingOpenstackInput struct {
	// Your OpenStack account access key.
	AccessKey *string `form:"name=access_key"`
	// The name of your OpenStack container.
	BucketName *string `form:"name=bucket_name"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingOpenstackCompressionCodec `form:"name=compression_codec"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingOpenstackFormatVersion `form:"name=format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `form:"name=gzip_level"`
	// How the message should be formatted.
	MessageType *LoggingOpenstackMessageType `form:"name=message_type"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// The path to upload logs to.
	Path *string `form:"name=path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `form:"name=period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingOpenstackPlacement `form:"name=placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `form:"name=public_key"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// Your OpenStack auth url.
	URL *string `form:"name=url"`
	// The username for your OpenStack account.
	User *string `form:"name=user"`
}
