// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ServiceResponseType - The type of this service.
type ServiceResponseType string

const (
	ServiceResponseTypeVcl  ServiceResponseType = "vcl"
	ServiceResponseTypeWasm ServiceResponseType = "wasm"
)

func (e ServiceResponseType) ToPointer() *ServiceResponseType {
	return &e
}

func (e *ServiceResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vcl":
		fallthrough
	case "wasm":
		*e = ServiceResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceResponseType: %v", v)
	}
}

// ServiceResponse - OK
type ServiceResponse struct {
	// A freeform descriptive note.
	Comment *string `json:"comment,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Alphanumeric string identifying the customer.
	CustomerID *string `json:"customer_id,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	ID        *string    `json:"id,omitempty"`
	// The name of the service.
	Name *string `json:"name,omitempty"`
	// Whether the service is paused. Services are paused due to a lack of traffic for an extended period of time. Services are resumed either when a draft version is activated or a locked version is cloned and reactivated.
	Paused *bool `json:"paused,omitempty"`
	// Unused at this time.
	PublishKey *string `json:"publish_key,omitempty"`
	// The type of this service.
	Type *ServiceResponseType `json:"type,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// A list of [versions](/reference/api/services/version/) associated with the service.
	Versions []SchemasVersionResponse `json:"versions,omitempty"`
}
