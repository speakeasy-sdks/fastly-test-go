// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"errors"
)

type IncludedWithWafExclusionItemType string

const (
	IncludedWithWafExclusionItemTypeWafRule         IncludedWithWafExclusionItemType = "waf_rule"
	IncludedWithWafExclusionItemTypeWafRuleRevision IncludedWithWafExclusionItemType = "waf_rule_revision"
)

type IncludedWithWafExclusionItem struct {
	WafRule         *WafRule
	WafRuleRevision *WafRuleRevision

	Type IncludedWithWafExclusionItemType
}

func CreateIncludedWithWafExclusionItemWafRule(wafRule WafRule) IncludedWithWafExclusionItem {
	typ := IncludedWithWafExclusionItemTypeWafRule

	return IncludedWithWafExclusionItem{
		WafRule: &wafRule,
		Type:    typ,
	}
}

func CreateIncludedWithWafExclusionItemWafRuleRevision(wafRuleRevision WafRuleRevision) IncludedWithWafExclusionItem {
	typ := IncludedWithWafExclusionItemTypeWafRuleRevision

	return IncludedWithWafExclusionItem{
		WafRuleRevision: &wafRuleRevision,
		Type:            typ,
	}
}

func (u *IncludedWithWafExclusionItem) UnmarshalJSON(data []byte) error {

	wafRule := new(WafRule)
	if err := utils.UnmarshalJSON(data, &wafRule, "", true, true); err == nil {
		u.WafRule = wafRule
		u.Type = IncludedWithWafExclusionItemTypeWafRule
		return nil
	}

	wafRuleRevision := new(WafRuleRevision)
	if err := utils.UnmarshalJSON(data, &wafRuleRevision, "", true, true); err == nil {
		u.WafRuleRevision = wafRuleRevision
		u.Type = IncludedWithWafExclusionItemTypeWafRuleRevision
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IncludedWithWafExclusionItem) MarshalJSON() ([]byte, error) {
	if u.WafRule != nil {
		return utils.MarshalJSON(u.WafRule, "", true)
	}

	if u.WafRuleRevision != nil {
		return utils.MarshalJSON(u.WafRuleRevision, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
