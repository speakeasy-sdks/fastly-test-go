// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// LoggingHerokuResponseFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingHerokuResponseFormatVersion int64

const (
	LoggingHerokuResponseFormatVersionOne LoggingHerokuResponseFormatVersion = 1
	LoggingHerokuResponseFormatVersionTwo LoggingHerokuResponseFormatVersion = 2
)

func (e LoggingHerokuResponseFormatVersion) ToPointer() *LoggingHerokuResponseFormatVersion {
	return &e
}

func (e *LoggingHerokuResponseFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingHerokuResponseFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHerokuResponseFormatVersion: %v", v)
	}
}

// LoggingHerokuResponsePlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingHerokuResponsePlacement string

const (
	LoggingHerokuResponsePlacementNone                   LoggingHerokuResponsePlacement = "none"
	LoggingHerokuResponsePlacementWafDebug               LoggingHerokuResponsePlacement = "waf_debug"
	LoggingHerokuResponsePlacementLessThanNilGreaterThan LoggingHerokuResponsePlacement = "<nil>"
)

func (e LoggingHerokuResponsePlacement) ToPointer() *LoggingHerokuResponsePlacement {
	return &e
}

func (e *LoggingHerokuResponsePlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingHerokuResponsePlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingHerokuResponsePlacement: %v", v)
	}
}

type LoggingHerokuResponse struct {
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `json:"format,omitempty"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingHerokuResponseFormatVersion `json:"format_version,omitempty"`
	// The name for the real-time logging configuration.
	Name *string `json:"name,omitempty"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingHerokuResponsePlacement `json:"placement,omitempty"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `json:"response_condition,omitempty"`
	ServiceID         *string `json:"service_id,omitempty"`
	// The token to use for authentication ([https://devcenter.heroku.com/articles/add-on-partner-log-integration](https://devcenter.heroku.com/articles/add-on-partner-log-integration)).
	Token *string `json:"token,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The URL to stream logs to.
	URL     *string `json:"url,omitempty"`
	Version *int64  `json:"version,omitempty"`
}

func (o *LoggingHerokuResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *LoggingHerokuResponse) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *LoggingHerokuResponse) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingHerokuResponse) GetFormatVersion() *LoggingHerokuResponseFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingHerokuResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingHerokuResponse) GetPlacement() *LoggingHerokuResponsePlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingHerokuResponse) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingHerokuResponse) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *LoggingHerokuResponse) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *LoggingHerokuResponse) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *LoggingHerokuResponse) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *LoggingHerokuResponse) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
