// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LoggingSplunkFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingSplunkFormatVersion int64

const (
	LoggingSplunkFormatVersionOne LoggingSplunkFormatVersion = 1
	LoggingSplunkFormatVersionTwo LoggingSplunkFormatVersion = 2
)

func (e LoggingSplunkFormatVersion) ToPointer() *LoggingSplunkFormatVersion {
	return &e
}

func (e *LoggingSplunkFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingSplunkFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingSplunkFormatVersion: %v", v)
	}
}

// LoggingSplunkPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingSplunkPlacement string

const (
	LoggingSplunkPlacementNone                   LoggingSplunkPlacement = "none"
	LoggingSplunkPlacementWafDebug               LoggingSplunkPlacement = "waf_debug"
	LoggingSplunkPlacementLessThanNilGreaterThan LoggingSplunkPlacement = "<nil>"
)

func (e LoggingSplunkPlacement) ToPointer() *LoggingSplunkPlacement {
	return &e
}

func (e *LoggingSplunkPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingSplunkPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingSplunkPlacement: %v", v)
	}
}

type LoggingSplunk2 struct {
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingSplunkFormatVersion `form:"name=format_version"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingSplunkPlacement `form:"name=placement"`
	// The maximum number of bytes sent in one request. Defaults `0` for unbounded.
	RequestMaxBytes *int64 `form:"name=request_max_bytes"`
	// The maximum number of logs sent in one request. Defaults `0` for unbounded.
	RequestMaxEntries *int64 `form:"name=request_max_entries"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// A secure certificate to authenticate a server with. Must be in PEM format.
	TLSCaCert *string `form:"name=tls_ca_cert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TLSClientCert *string `form:"name=tls_client_cert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TLSClientKey *string `form:"name=tls_client_key"`
	// The hostname to verify the server's certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported.
	TLSHostname *string `form:"name=tls_hostname"`
	// A Splunk token for use in posting logs over HTTP to your collector.
	Token *string `form:"name=token"`
	// The URL to post logs to.
	URL *string `form:"name=url"`
	// Whether to use TLS.
	UseTLS *LoggingUseTLS `form:"name=use_tls"`
}
