// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// LoggingCloudfilesCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingCloudfilesCompressionCodec string

const (
	LoggingCloudfilesCompressionCodecZstd   LoggingCloudfilesCompressionCodec = "zstd"
	LoggingCloudfilesCompressionCodecSnappy LoggingCloudfilesCompressionCodec = "snappy"
	LoggingCloudfilesCompressionCodecGzip   LoggingCloudfilesCompressionCodec = "gzip"
)

func (e LoggingCloudfilesCompressionCodec) ToPointer() *LoggingCloudfilesCompressionCodec {
	return &e
}

func (e *LoggingCloudfilesCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingCloudfilesCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingCloudfilesCompressionCodec: %v", v)
	}
}

// LoggingCloudfilesFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingCloudfilesFormatVersion int64

const (
	LoggingCloudfilesFormatVersionOne LoggingCloudfilesFormatVersion = 1
	LoggingCloudfilesFormatVersionTwo LoggingCloudfilesFormatVersion = 2
)

func (e LoggingCloudfilesFormatVersion) ToPointer() *LoggingCloudfilesFormatVersion {
	return &e
}

func (e *LoggingCloudfilesFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingCloudfilesFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingCloudfilesFormatVersion: %v", v)
	}
}

// LoggingCloudfilesMessageType - How the message should be formatted.
type LoggingCloudfilesMessageType string

const (
	LoggingCloudfilesMessageTypeClassic LoggingCloudfilesMessageType = "classic"
	LoggingCloudfilesMessageTypeLoggly  LoggingCloudfilesMessageType = "loggly"
	LoggingCloudfilesMessageTypeLogplex LoggingCloudfilesMessageType = "logplex"
	LoggingCloudfilesMessageTypeBlank   LoggingCloudfilesMessageType = "blank"
)

func (e LoggingCloudfilesMessageType) ToPointer() *LoggingCloudfilesMessageType {
	return &e
}

func (e *LoggingCloudfilesMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingCloudfilesMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingCloudfilesMessageType: %v", v)
	}
}

// LoggingCloudfilesPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingCloudfilesPlacement string

const (
	LoggingCloudfilesPlacementNone                   LoggingCloudfilesPlacement = "none"
	LoggingCloudfilesPlacementWafDebug               LoggingCloudfilesPlacement = "waf_debug"
	LoggingCloudfilesPlacementLessThanNilGreaterThan LoggingCloudfilesPlacement = "<nil>"
)

func (e LoggingCloudfilesPlacement) ToPointer() *LoggingCloudfilesPlacement {
	return &e
}

func (e *LoggingCloudfilesPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingCloudfilesPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingCloudfilesPlacement: %v", v)
	}
}

// LoggingCloudfilesRegion - The region to stream logs to.
type LoggingCloudfilesRegion string

const (
	LoggingCloudfilesRegionDfw                    LoggingCloudfilesRegion = "DFW"
	LoggingCloudfilesRegionOrd                    LoggingCloudfilesRegion = "ORD"
	LoggingCloudfilesRegionIad                    LoggingCloudfilesRegion = "IAD"
	LoggingCloudfilesRegionLon                    LoggingCloudfilesRegion = "LON"
	LoggingCloudfilesRegionSyd                    LoggingCloudfilesRegion = "SYD"
	LoggingCloudfilesRegionHkg                    LoggingCloudfilesRegion = "HKG"
	LoggingCloudfilesRegionLessThanNilGreaterThan LoggingCloudfilesRegion = "<nil>"
)

func (e LoggingCloudfilesRegion) ToPointer() *LoggingCloudfilesRegion {
	return &e
}

func (e *LoggingCloudfilesRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DFW":
		fallthrough
	case "ORD":
		fallthrough
	case "IAD":
		fallthrough
	case "LON":
		fallthrough
	case "SYD":
		fallthrough
	case "HKG":
		fallthrough
	case "<nil>":
		*e = LoggingCloudfilesRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingCloudfilesRegion: %v", v)
	}
}

type LoggingCloudfilesInput struct {
	// Your Cloud Files account access key.
	AccessKey *string `form:"name=access_key"`
	// The name of your Cloud Files container.
	BucketName *string `form:"name=bucket_name"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingCloudfilesCompressionCodec `form:"name=compression_codec"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingCloudfilesFormatVersion `default:"2" form:"name=format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `default:"0" form:"name=gzip_level"`
	// How the message should be formatted.
	MessageType *LoggingCloudfilesMessageType `default:"classic" form:"name=message_type"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// The path to upload logs to.
	Path *string `default:"null" form:"name=path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `default:"3600" form:"name=period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingCloudfilesPlacement `form:"name=placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `default:"null" form:"name=public_key"`
	// The region to stream logs to.
	Region *LoggingCloudfilesRegion `form:"name=region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// The username for your Cloud Files account.
	User *string `form:"name=user"`
}

func (l LoggingCloudfilesInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingCloudfilesInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingCloudfilesInput) GetAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AccessKey
}

func (o *LoggingCloudfilesInput) GetBucketName() *string {
	if o == nil {
		return nil
	}
	return o.BucketName
}

func (o *LoggingCloudfilesInput) GetCompressionCodec() *LoggingCloudfilesCompressionCodec {
	if o == nil {
		return nil
	}
	return o.CompressionCodec
}

func (o *LoggingCloudfilesInput) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingCloudfilesInput) GetFormatVersion() *LoggingCloudfilesFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingCloudfilesInput) GetGzipLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.GzipLevel
}

func (o *LoggingCloudfilesInput) GetMessageType() *LoggingCloudfilesMessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingCloudfilesInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingCloudfilesInput) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *LoggingCloudfilesInput) GetPeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *LoggingCloudfilesInput) GetPlacement() *LoggingCloudfilesPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingCloudfilesInput) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

func (o *LoggingCloudfilesInput) GetRegion() *LoggingCloudfilesRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *LoggingCloudfilesInput) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingCloudfilesInput) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
