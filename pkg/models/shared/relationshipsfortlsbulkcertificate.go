// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"errors"
)

type RelationshipsForTLSBulkCertificateType string

const (
	RelationshipsForTLSBulkCertificateTypeRelationshipTLSConfigurations RelationshipsForTLSBulkCertificateType = "relationship_tls_configurations"
	RelationshipsForTLSBulkCertificateTypeRelationshipTLSDomains        RelationshipsForTLSBulkCertificateType = "relationship_tls_domains"
)

type RelationshipsForTLSBulkCertificate struct {
	RelationshipTLSConfigurations *RelationshipTLSConfigurations
	RelationshipTLSDomains        *RelationshipTLSDomains

	Type RelationshipsForTLSBulkCertificateType
}

func CreateRelationshipsForTLSBulkCertificateRelationshipTLSConfigurations(relationshipTLSConfigurations RelationshipTLSConfigurations) RelationshipsForTLSBulkCertificate {
	typ := RelationshipsForTLSBulkCertificateTypeRelationshipTLSConfigurations

	return RelationshipsForTLSBulkCertificate{
		RelationshipTLSConfigurations: &relationshipTLSConfigurations,
		Type:                          typ,
	}
}

func CreateRelationshipsForTLSBulkCertificateRelationshipTLSDomains(relationshipTLSDomains RelationshipTLSDomains) RelationshipsForTLSBulkCertificate {
	typ := RelationshipsForTLSBulkCertificateTypeRelationshipTLSDomains

	return RelationshipsForTLSBulkCertificate{
		RelationshipTLSDomains: &relationshipTLSDomains,
		Type:                   typ,
	}
}

func (u *RelationshipsForTLSBulkCertificate) UnmarshalJSON(data []byte) error {

	relationshipTLSConfigurations := new(RelationshipTLSConfigurations)
	if err := utils.UnmarshalJSON(data, &relationshipTLSConfigurations, "", true, true); err == nil {
		u.RelationshipTLSConfigurations = relationshipTLSConfigurations
		u.Type = RelationshipsForTLSBulkCertificateTypeRelationshipTLSConfigurations
		return nil
	}

	relationshipTLSDomains := new(RelationshipTLSDomains)
	if err := utils.UnmarshalJSON(data, &relationshipTLSDomains, "", true, true); err == nil {
		u.RelationshipTLSDomains = relationshipTLSDomains
		u.Type = RelationshipsForTLSBulkCertificateTypeRelationshipTLSDomains
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RelationshipsForTLSBulkCertificate) MarshalJSON() ([]byte, error) {
	if u.RelationshipTLSConfigurations != nil {
		return utils.MarshalJSON(u.RelationshipTLSConfigurations, "", true)
	}

	if u.RelationshipTLSDomains != nil {
		return utils.MarshalJSON(u.RelationshipTLSDomains, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
