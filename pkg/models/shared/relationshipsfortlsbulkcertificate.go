// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"errors"
)

type RelationshipsForTLSBulkCertificate2TLSDomains struct {
	Data []RelationshipMemberTLSDomain `json:"data,omitempty"`
}

func (o *RelationshipsForTLSBulkCertificate2TLSDomains) GetData() []RelationshipMemberTLSDomain {
	if o == nil {
		return nil
	}
	return o.Data
}

// RelationshipsForTLSBulkCertificate2 - All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
type RelationshipsForTLSBulkCertificate2 struct {
	TLSDomains *RelationshipsForTLSBulkCertificate2TLSDomains `json:"tls_domains,omitempty"`
}

func (o *RelationshipsForTLSBulkCertificate2) GetTLSDomains() *RelationshipsForTLSBulkCertificate2TLSDomains {
	if o == nil {
		return nil
	}
	return o.TLSDomains
}

type RelationshipsForTLSBulkCertificateType string

const (
	RelationshipsForTLSBulkCertificateTypeRelationshipTLSConfigurations       RelationshipsForTLSBulkCertificateType = "relationship_tls_configurations"
	RelationshipsForTLSBulkCertificateTypeRelationshipsForTLSBulkCertificate2 RelationshipsForTLSBulkCertificateType = "relationships_for_tls_bulk_certificate_2"
)

type RelationshipsForTLSBulkCertificate struct {
	RelationshipTLSConfigurations       *RelationshipTLSConfigurations
	RelationshipsForTLSBulkCertificate2 *RelationshipsForTLSBulkCertificate2

	Type RelationshipsForTLSBulkCertificateType
}

func CreateRelationshipsForTLSBulkCertificateRelationshipTLSConfigurations(relationshipTLSConfigurations RelationshipTLSConfigurations) RelationshipsForTLSBulkCertificate {
	typ := RelationshipsForTLSBulkCertificateTypeRelationshipTLSConfigurations

	return RelationshipsForTLSBulkCertificate{
		RelationshipTLSConfigurations: &relationshipTLSConfigurations,
		Type:                          typ,
	}
}

func CreateRelationshipsForTLSBulkCertificateRelationshipsForTLSBulkCertificate2(relationshipsForTLSBulkCertificate2 RelationshipsForTLSBulkCertificate2) RelationshipsForTLSBulkCertificate {
	typ := RelationshipsForTLSBulkCertificateTypeRelationshipsForTLSBulkCertificate2

	return RelationshipsForTLSBulkCertificate{
		RelationshipsForTLSBulkCertificate2: &relationshipsForTLSBulkCertificate2,
		Type:                                typ,
	}
}

func (u *RelationshipsForTLSBulkCertificate) UnmarshalJSON(data []byte) error {

	relationshipTLSConfigurations := new(RelationshipTLSConfigurations)
	if err := utils.UnmarshalJSON(data, &relationshipTLSConfigurations, "", true, true); err == nil {
		u.RelationshipTLSConfigurations = relationshipTLSConfigurations
		u.Type = RelationshipsForTLSBulkCertificateTypeRelationshipTLSConfigurations
		return nil
	}

	relationshipsForTLSBulkCertificate2 := new(RelationshipsForTLSBulkCertificate2)
	if err := utils.UnmarshalJSON(data, &relationshipsForTLSBulkCertificate2, "", true, true); err == nil {
		u.RelationshipsForTLSBulkCertificate2 = relationshipsForTLSBulkCertificate2
		u.Type = RelationshipsForTLSBulkCertificateTypeRelationshipsForTLSBulkCertificate2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RelationshipsForTLSBulkCertificate) MarshalJSON() ([]byte, error) {
	if u.RelationshipTLSConfigurations != nil {
		return utils.MarshalJSON(u.RelationshipTLSConfigurations, "", true)
	}

	if u.RelationshipsForTLSBulkCertificate2 != nil {
		return utils.MarshalJSON(u.RelationshipsForTLSBulkCertificate2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
