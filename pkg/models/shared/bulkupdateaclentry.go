// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// BulkUpdateACLEntryNegated - Whether to negate the match. Useful primarily when creating individual exceptions to larger subnets.
type BulkUpdateACLEntryNegated int64

const (
	BulkUpdateACLEntryNegatedZero BulkUpdateACLEntryNegated = 0
	BulkUpdateACLEntryNegatedOne  BulkUpdateACLEntryNegated = 1
)

func (e BulkUpdateACLEntryNegated) ToPointer() *BulkUpdateACLEntryNegated {
	return &e
}

func (e *BulkUpdateACLEntryNegated) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = BulkUpdateACLEntryNegated(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkUpdateACLEntryNegated: %v", v)
	}
}

type BulkUpdateACLEntryOp string

const (
	BulkUpdateACLEntryOpCreate BulkUpdateACLEntryOp = "create"
	BulkUpdateACLEntryOpUpdate BulkUpdateACLEntryOp = "update"
	BulkUpdateACLEntryOpDelete BulkUpdateACLEntryOp = "delete"
)

func (e BulkUpdateACLEntryOp) ToPointer() *BulkUpdateACLEntryOp {
	return &e
}

func (e *BulkUpdateACLEntryOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "create":
		fallthrough
	case "update":
		fallthrough
	case "delete":
		*e = BulkUpdateACLEntryOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkUpdateACLEntryOp: %v", v)
	}
}

type BulkUpdateACLEntryInput struct {
	// A freeform descriptive note.
	Comment *string `json:"comment,omitempty"`
	// An IP address.
	IP *string `json:"ip,omitempty"`
	// Whether to negate the match. Useful primarily when creating individual exceptions to larger subnets.
	Negated *BulkUpdateACLEntryNegated `default:"0" json:"negated"`
	Op      *BulkUpdateACLEntryOp      `json:"op,omitempty"`
	// Number of bits for the subnet mask applied to the IP address. For IPv4 addresses, a value of 32 represents the smallest subnet mask (1 address), 24 represents a class C subnet mask (256 addresses), 16 represents a class B subnet mask (65k addresses), and 8 is class A subnet mask (16m addresses). If not provided, no mask is applied.
	Subnet *int64 `json:"subnet,omitempty"`
}

func (b BulkUpdateACLEntryInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BulkUpdateACLEntryInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BulkUpdateACLEntryInput) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *BulkUpdateACLEntryInput) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *BulkUpdateACLEntryInput) GetNegated() *BulkUpdateACLEntryNegated {
	if o == nil {
		return nil
	}
	return o.Negated
}

func (o *BulkUpdateACLEntryInput) GetOp() *BulkUpdateACLEntryOp {
	if o == nil {
		return nil
	}
	return o.Op
}

func (o *BulkUpdateACLEntryInput) GetSubnet() *int64 {
	if o == nil {
		return nil
	}
	return o.Subnet
}
