// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
	"time"
)

// LoggingDigitaloceanResponseCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingDigitaloceanResponseCompressionCodec string

const (
	LoggingDigitaloceanResponseCompressionCodecZstd   LoggingDigitaloceanResponseCompressionCodec = "zstd"
	LoggingDigitaloceanResponseCompressionCodecSnappy LoggingDigitaloceanResponseCompressionCodec = "snappy"
	LoggingDigitaloceanResponseCompressionCodecGzip   LoggingDigitaloceanResponseCompressionCodec = "gzip"
)

func (e LoggingDigitaloceanResponseCompressionCodec) ToPointer() *LoggingDigitaloceanResponseCompressionCodec {
	return &e
}

func (e *LoggingDigitaloceanResponseCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingDigitaloceanResponseCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanResponseCompressionCodec: %v", v)
	}
}

// LoggingDigitaloceanResponseFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingDigitaloceanResponseFormatVersion int64

const (
	LoggingDigitaloceanResponseFormatVersionOne LoggingDigitaloceanResponseFormatVersion = 1
	LoggingDigitaloceanResponseFormatVersionTwo LoggingDigitaloceanResponseFormatVersion = 2
)

func (e LoggingDigitaloceanResponseFormatVersion) ToPointer() *LoggingDigitaloceanResponseFormatVersion {
	return &e
}

func (e *LoggingDigitaloceanResponseFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingDigitaloceanResponseFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanResponseFormatVersion: %v", v)
	}
}

// LoggingDigitaloceanResponseMessageType - How the message should be formatted.
type LoggingDigitaloceanResponseMessageType string

const (
	LoggingDigitaloceanResponseMessageTypeClassic LoggingDigitaloceanResponseMessageType = "classic"
	LoggingDigitaloceanResponseMessageTypeLoggly  LoggingDigitaloceanResponseMessageType = "loggly"
	LoggingDigitaloceanResponseMessageTypeLogplex LoggingDigitaloceanResponseMessageType = "logplex"
	LoggingDigitaloceanResponseMessageTypeBlank   LoggingDigitaloceanResponseMessageType = "blank"
)

func (e LoggingDigitaloceanResponseMessageType) ToPointer() *LoggingDigitaloceanResponseMessageType {
	return &e
}

func (e *LoggingDigitaloceanResponseMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingDigitaloceanResponseMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanResponseMessageType: %v", v)
	}
}

// LoggingDigitaloceanResponsePlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingDigitaloceanResponsePlacement string

const (
	LoggingDigitaloceanResponsePlacementNone                   LoggingDigitaloceanResponsePlacement = "none"
	LoggingDigitaloceanResponsePlacementWafDebug               LoggingDigitaloceanResponsePlacement = "waf_debug"
	LoggingDigitaloceanResponsePlacementLessThanNilGreaterThan LoggingDigitaloceanResponsePlacement = "<nil>"
)

func (e LoggingDigitaloceanResponsePlacement) ToPointer() *LoggingDigitaloceanResponsePlacement {
	return &e
}

func (e *LoggingDigitaloceanResponsePlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingDigitaloceanResponsePlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanResponsePlacement: %v", v)
	}
}

type LoggingDigitaloceanResponse struct {
	// Your DigitalOcean Spaces account access key.
	AccessKey *string `json:"access_key,omitempty"`
	// The name of the DigitalOcean Space.
	BucketName *string `json:"bucket_name,omitempty"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingDigitaloceanResponseCompressionCodec `json:"compression_codec,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// The domain of the DigitalOcean Spaces endpoint.
	Domain *string `default:"nyc3.digitaloceanspaces.com" json:"domain"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" json:"format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingDigitaloceanResponseFormatVersion `default:"2" json:"format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `default:"0" json:"gzip_level"`
	// How the message should be formatted.
	MessageType *LoggingDigitaloceanResponseMessageType `default:"classic" json:"message_type"`
	// The name for the real-time logging configuration.
	Name *string `json:"name,omitempty"`
	// The path to upload logs to.
	Path *string `default:"null" json:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `default:"3600" json:"period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingDigitaloceanResponsePlacement `json:"placement,omitempty"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `default:"null" json:"public_key"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `json:"response_condition,omitempty"`
	// Your DigitalOcean Spaces account secret key.
	SecretKey *string `json:"secret_key,omitempty"`
	ServiceID *string `json:"service_id,omitempty"`
	// A timestamp format
	TimestampFormat *string `json:"timestamp_format,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Version   *int64     `json:"version,omitempty"`
}

func (l LoggingDigitaloceanResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingDigitaloceanResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingDigitaloceanResponse) GetAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AccessKey
}

func (o *LoggingDigitaloceanResponse) GetBucketName() *string {
	if o == nil {
		return nil
	}
	return o.BucketName
}

func (o *LoggingDigitaloceanResponse) GetCompressionCodec() *LoggingDigitaloceanResponseCompressionCodec {
	if o == nil {
		return nil
	}
	return o.CompressionCodec
}

func (o *LoggingDigitaloceanResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *LoggingDigitaloceanResponse) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *LoggingDigitaloceanResponse) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *LoggingDigitaloceanResponse) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingDigitaloceanResponse) GetFormatVersion() *LoggingDigitaloceanResponseFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingDigitaloceanResponse) GetGzipLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.GzipLevel
}

func (o *LoggingDigitaloceanResponse) GetMessageType() *LoggingDigitaloceanResponseMessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingDigitaloceanResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingDigitaloceanResponse) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *LoggingDigitaloceanResponse) GetPeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *LoggingDigitaloceanResponse) GetPlacement() *LoggingDigitaloceanResponsePlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingDigitaloceanResponse) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

func (o *LoggingDigitaloceanResponse) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingDigitaloceanResponse) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

func (o *LoggingDigitaloceanResponse) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *LoggingDigitaloceanResponse) GetTimestampFormat() *string {
	if o == nil {
		return nil
	}
	return o.TimestampFormat
}

func (o *LoggingDigitaloceanResponse) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *LoggingDigitaloceanResponse) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
