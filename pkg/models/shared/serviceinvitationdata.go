// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/types"
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// ServiceInvitationDataAttributesPermission - The permission the accepting user will have in relation to the service.
type ServiceInvitationDataAttributesPermission string

const (
	ServiceInvitationDataAttributesPermissionFull        ServiceInvitationDataAttributesPermission = "full"
	ServiceInvitationDataAttributesPermissionReadOnly    ServiceInvitationDataAttributesPermission = "read_only"
	ServiceInvitationDataAttributesPermissionPurgeSelect ServiceInvitationDataAttributesPermission = "purge_select"
	ServiceInvitationDataAttributesPermissionPurgeAll    ServiceInvitationDataAttributesPermission = "purge_all"
)

func (e ServiceInvitationDataAttributesPermission) ToPointer() *ServiceInvitationDataAttributesPermission {
	return &e
}

func (e *ServiceInvitationDataAttributesPermission) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "full":
		fallthrough
	case "read_only":
		fallthrough
	case "purge_select":
		fallthrough
	case "purge_all":
		*e = ServiceInvitationDataAttributesPermission(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceInvitationDataAttributesPermission: %v", v)
	}
}

type ServiceInvitationDataAttributes struct {
	// The permission the accepting user will have in relation to the service.
	Permission *ServiceInvitationDataAttributesPermission `default:"full" json:"permission"`
}

func (s ServiceInvitationDataAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceInvitationDataAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ServiceInvitationDataAttributes) GetPermission() *ServiceInvitationDataAttributesPermission {
	if o == nil {
		return nil
	}
	return o.Permission
}

// ServiceInvitationDataRelationshipsInput - Service the accepting user will have access to.
type ServiceInvitationDataRelationshipsInput struct {
	Service *RelationshipMemberServiceInput `json:"service,omitempty"`
}

func (o *ServiceInvitationDataRelationshipsInput) GetService() *RelationshipMemberServiceInput {
	if o == nil {
		return nil
	}
	return o.Service
}

type ServiceInvitationDataInput struct {
	Attributes *ServiceInvitationDataAttributes `json:"attributes,omitempty"`
	// Service the accepting user will have access to.
	Relationships *ServiceInvitationDataRelationshipsInput `json:"relationships,omitempty"`
	// Resource type
	type_ *string `const:"service_invitation" json:"type"`
}

func (s ServiceInvitationDataInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceInvitationDataInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ServiceInvitationDataInput) GetAttributes() *ServiceInvitationDataAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *ServiceInvitationDataInput) GetRelationships() *ServiceInvitationDataRelationshipsInput {
	if o == nil {
		return nil
	}
	return o.Relationships
}

func (o *ServiceInvitationDataInput) GetType() *string {
	return types.String("service_invitation")
}
