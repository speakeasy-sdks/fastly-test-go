// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// WafFirewallVersionResponseDataAttributesLastDeploymentStatus - The status of the last deployment of this firewall version.
type WafFirewallVersionResponseDataAttributesLastDeploymentStatus string

const (
	WafFirewallVersionResponseDataAttributesLastDeploymentStatusLessThanNilGreaterThan WafFirewallVersionResponseDataAttributesLastDeploymentStatus = "<nil>"
	WafFirewallVersionResponseDataAttributesLastDeploymentStatusPending                WafFirewallVersionResponseDataAttributesLastDeploymentStatus = "pending"
	WafFirewallVersionResponseDataAttributesLastDeploymentStatusInProgress             WafFirewallVersionResponseDataAttributesLastDeploymentStatus = "in progress"
	WafFirewallVersionResponseDataAttributesLastDeploymentStatusCompleted              WafFirewallVersionResponseDataAttributesLastDeploymentStatus = "completed"
	WafFirewallVersionResponseDataAttributesLastDeploymentStatusFailed                 WafFirewallVersionResponseDataAttributesLastDeploymentStatus = "failed"
)

func (e WafFirewallVersionResponseDataAttributesLastDeploymentStatus) ToPointer() *WafFirewallVersionResponseDataAttributesLastDeploymentStatus {
	return &e
}

func (e *WafFirewallVersionResponseDataAttributesLastDeploymentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "pending":
		fallthrough
	case "in progress":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = WafFirewallVersionResponseDataAttributesLastDeploymentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WafFirewallVersionResponseDataAttributesLastDeploymentStatus: %v", v)
	}
}

type WafFirewallVersionResponseDataAttributes struct {
	// Whether a specific firewall version is currently deployed.
	Active *bool `json:"active,omitempty"`
	// The number of active Fastly rules set to block.
	ActiveRulesFastlyBlockCount *int64 `json:"active_rules_fastly_block_count,omitempty"`
	// The number of active Fastly rules set to log.
	ActiveRulesFastlyLogCount *int64 `json:"active_rules_fastly_log_count,omitempty"`
	// The number of active Fastly rules set to score.
	ActiveRulesFastlyScoreCount *int64 `json:"active_rules_fastly_score_count,omitempty"`
	// The number of active OWASP rules set to block.
	ActiveRulesOwaspBlockCount *int64 `json:"active_rules_owasp_block_count,omitempty"`
	// The number of active OWASP rules set to log.
	ActiveRulesOwaspLogCount *int64 `json:"active_rules_owasp_log_count,omitempty"`
	// The number of active OWASP rules set to score.
	ActiveRulesOwaspScoreCount *int64 `json:"active_rules_owasp_score_count,omitempty"`
	// The number of active Trustwave rules set to block.
	ActiveRulesTrustwaveBlockCount *int64 `json:"active_rules_trustwave_block_count,omitempty"`
	// The number of active Trustwave rules set to log.
	ActiveRulesTrustwaveLogCount *int64 `json:"active_rules_trustwave_log_count,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Time-stamp (GMT) indicating when the firewall version was last deployed.
	DeployedAt *string `json:"deployed_at,omitempty"`
	// Contains error message if the firewall version fails to deploy.
	Error *string `json:"error,omitempty"`
	// The status of the last deployment of this firewall version.
	LastDeploymentStatus *WafFirewallVersionResponseDataAttributesLastDeploymentStatus `json:"last_deployment_status,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}
