// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// Results - The [results](#results-data-model) of the query, grouped by service (and optionally, region), and aggregated over the appropriate time span.
type Results struct {
	// Total body bytes received from requests that triggered a WAF rule that was blocked.
	AttackBlockedReqBodyBytes *int64 `json:"attack_blocked_req_body_bytes,omitempty"`
	// Total header bytes received from requests that triggered a WAF rule that was blocked.
	AttackBlockedReqHeaderBytes *int64 `json:"attack_blocked_req_header_bytes,omitempty"`
	// Total body bytes received from requests that triggered a WAF rule that was logged.
	AttackLoggedReqBodyBytes *int64 `json:"attack_logged_req_body_bytes,omitempty"`
	// Total header bytes received from requests that triggered a WAF rule that was logged.
	AttackLoggedReqHeaderBytes *int64 `json:"attack_logged_req_header_bytes,omitempty"`
	// Total body bytes received from requests that triggered a WAF rule that was passed.
	AttackPassedReqBodyBytes *int64 `json:"attack_passed_req_body_bytes,omitempty"`
	// Total header bytes received from requests that triggered a WAF rule that was passed.
	AttackPassedReqHeaderBytes *int64 `json:"attack_passed_req_header_bytes,omitempty"`
	// Total body bytes received from requests that triggered a WAF rule.
	AttackReqBodyBytes *int64 `json:"attack_req_body_bytes,omitempty"`
	// Total header bytes received from requests that triggered a WAF rule.
	AttackReqHeaderBytes *int64 `json:"attack_req_header_bytes,omitempty"`
	// Total bytes delivered for requests that triggered a WAF rule and returned a synthetic response.
	AttackRespSynthBytes *int64 `json:"attack_resp_synth_bytes,omitempty"`
	// Total bytes delivered (`resp_header_bytes` + `resp_body_bytes` + `bereq_header_bytes` + `bereq_body_bytes` + `compute_resp_header_bytes` + `compute_resp_body_bytes` + `compute_bereq_header_bytes` + `compute_bereq_body_bytes` + `websocket_resp_header_bytes` + `websocket_resp_body_bytes` + `websocket_bereq_header_bytes` + `websocket_bereq_body_bytes` + `fanout_resp_header_bytes` + `fanout_resp_body_bytes` + `fanout_bereq_header_bytes` + `fanout_bereq_body_bytes`).
	Bandwidth *int64 `json:"bandwidth,omitempty"`
	// Total body bytes sent to origin.
	BereqBodyBytes *int64 `json:"bereq_body_bytes,omitempty"`
	// Total header bytes sent to origin.
	BereqHeaderBytes *int64 `json:"bereq_header_bytes,omitempty"`
	// Total body bytes delivered (alias for resp_body_bytes).
	BodySize *int64 `json:"body_size,omitempty"`
	// Total body bytes sent to backends (origins) by Compute@Edge.
	ComputeBereqBodyBytes *int64 `json:"compute_bereq_body_bytes,omitempty"`
	// Number of backend request errors, including timeouts.
	ComputeBereqErrors *int64 `json:"compute_bereq_errors,omitempty"`
	// Total header bytes sent to backends (origins) by Compute@Edge.
	ComputeBereqHeaderBytes *int64 `json:"compute_bereq_header_bytes,omitempty"`
	// Number of backend requests started.
	ComputeBereqs *int64 `json:"compute_bereqs,omitempty"`
	// Total body bytes received from backends (origins) by Compute@Edge.
	ComputeBerespBodyBytes *int64 `json:"compute_beresp_body_bytes,omitempty"`
	// Total header bytes received from backends (origins) by Compute@Edge.
	ComputeBerespHeaderBytes *int64 `json:"compute_beresp_header_bytes,omitempty"`
	// The amount of active CPU time used to process your requests (in milliseconds).
	ComputeExecutionTimeMs *float64 `json:"compute_execution_time_ms,omitempty"`
	// Number of times a guest exceeded its globals limit.
	ComputeGlobalsLimitExceeded *int64 `json:"compute_globals_limit_exceeded,omitempty"`
	// Number of times a service experienced a guest code error.
	ComputeGuestErrors *int64 `json:"compute_guest_errors,omitempty"`
	// Number of times a guest exceeded its heap limit.
	ComputeHeapLimitExceeded *int64 `json:"compute_heap_limit_exceeded,omitempty"`
	// The amount of RAM used for your service by Fastly (in bytes).
	ComputeRAMUsed *int64 `json:"compute_ram_used,omitempty"`
	// Total body bytes received by Compute@Edge.
	ComputeReqBodyBytes *int64 `json:"compute_req_body_bytes,omitempty"`
	// Total header bytes received by Compute@Edge.
	ComputeReqHeaderBytes *int64 `json:"compute_req_header_bytes,omitempty"`
	// The total, actual amount of time used to process your requests, including active CPU time (in milliseconds).
	ComputeRequestTimeMs *float64 `json:"compute_request_time_ms,omitempty"`
	// The total number of requests that were received for your service by Fastly.
	ComputeRequests *int64 `json:"compute_requests,omitempty"`
	// Number of times a guest exceeded its resource limit, includes heap, stack, globals, and code execution timeout.
	ComputeResourceLimitExceeded *int64 `json:"compute_resource_limit_exceeded,omitempty"`
	// Total body bytes sent from Compute@Edge to end user.
	ComputeRespBodyBytes *int64 `json:"compute_resp_body_bytes,omitempty"`
	// Total header bytes sent from Compute@Edge to end user.
	ComputeRespHeaderBytes *int64 `json:"compute_resp_header_bytes,omitempty"`
	// Number of "Informational" category status codes delivered by Compute@Edge.
	ComputeRespStatus1xx *int64 `json:"compute_resp_status_1xx,omitempty"`
	// Number of "Success" category status codes delivered by Compute@Edge.
	ComputeRespStatus2xx *int64 `json:"compute_resp_status_2xx,omitempty"`
	// Number of "Redirection" category status codes delivered by Compute@Edge.
	ComputeRespStatus3xx *int64 `json:"compute_resp_status_3xx,omitempty"`
	// Number of "Client Error" category status codes delivered by Compute@Edge.
	ComputeRespStatus4xx *int64 `json:"compute_resp_status_4xx,omitempty"`
	// Number of "Server Error" category status codes delivered by Compute@Edge.
	ComputeRespStatus5xx *int64 `json:"compute_resp_status_5xx,omitempty"`
	// Number of times a service experienced a guest runtime error.
	ComputeRuntimeErrors *int64 `json:"compute_runtime_errors,omitempty"`
	// Number of times a guest exceeded its stack limit.
	ComputeStackLimitExceeded *int64 `json:"compute_stack_limit_exceeded,omitempty"`
	// The number of times the blackhole action was taken. The blackhole action quietly closes a TCP connection without sending a reset. The blackhole action quietly closes a TCP connection without notifying its peer (all TCP state is dropped).
	DdosActionBlackhole *int64 `json:"ddos_action_blackhole,omitempty"`
	// The number of times the close action was taken. The close action aborts the connection as soon as possible. The close action takes effect either right after accept, right after the client hello, or right after the response was sent.
	DdosActionClose *int64 `json:"ddos_action_close,omitempty"`
	// For HTTP/2, the number of connections the limit-streams action was applied to. The limit-streams action caps the allowed number of concurrent streams in a connection.
	DdosActionLimitStreamsConnections *int64 `json:"ddos_action_limit_streams_connections,omitempty"`
	// For HTTP/2, the number of requests made on a connection for which the limit-streams action was taken. The limit-streams action caps the allowed number of concurrent streams in a connection.
	DdosActionLimitStreamsRequests *int64 `json:"ddos_action_limit_streams_requests,omitempty"`
	// The number of times the tarpit action was taken. The tarpit action delays writing the response to the client.
	DdosActionTarpit *int64 `json:"ddos_action_tarpit,omitempty"`
	// The number of times the tarpit-accept action was taken. The tarpit-accept action adds a delay when accepting future connections.
	DdosActionTarpitAccept *int64 `json:"ddos_action_tarpit_accept,omitempty"`
	// Number of executions of the `vcl_deliver` Varnish subroutine.
	DeliverSubCount *int64 `json:"deliver_sub_count,omitempty"`
	// Time spent inside the `vcl_deliver` Varnish subroutine (in seconds).
	DeliverSubTime *float64 `json:"deliver_sub_time,omitempty"`
	// Number of requests sent by end users to Fastly that resulted in a hit at the edge.
	EdgeHitRequests *int64 `json:"edge_hit_requests,omitempty"`
	// Body bytes delivered for edge hits.
	EdgeHitRespBodyBytes *int64 `json:"edge_hit_resp_body_bytes,omitempty"`
	// Header bytes delivered for edge hits.
	EdgeHitRespHeaderBytes *int64 `json:"edge_hit_resp_header_bytes,omitempty"`
	// Number of requests sent by end users to Fastly that resulted in a miss at the edge.
	EdgeMissRequests *int64 `json:"edge_miss_requests,omitempty"`
	// Body bytes delivered for edge misses.
	EdgeMissRespBodyBytes *int64 `json:"edge_miss_resp_body_bytes,omitempty"`
	// Header bytes delivered for edge misses.
	EdgeMissRespHeaderBytes *int64 `json:"edge_miss_resp_header_bytes,omitempty"`
	// Number of requests sent by end users to Fastly.
	EdgeRequests *int64 `json:"edge_requests,omitempty"`
	// Total body bytes delivered from Fastly to the end user.
	EdgeRespBodyBytes *int64 `json:"edge_resp_body_bytes,omitempty"`
	// Total header bytes delivered from Fastly to the end user.
	EdgeRespHeaderBytes *int64 `json:"edge_resp_header_bytes,omitempty"`
	// Number of executions of the `vcl_error` Varnish subroutine.
	ErrorSubCount *int64 `json:"error_sub_count,omitempty"`
	// Time spent inside the `vcl_error` Varnish subroutine (in seconds).
	ErrorSubTime *float64 `json:"error_sub_time,omitempty"`
	// Number of cache errors.
	Errors *int64 `json:"errors,omitempty"`
	// Total body or message content bytes sent to backends over Fanout connections.
	FanoutBereqBodyBytes *int64 `json:"fanout_bereq_body_bytes,omitempty"`
	// Total header bytes sent to backends over Fanout connections.
	FanoutBereqHeaderBytes *int64 `json:"fanout_bereq_header_bytes,omitempty"`
	// Total body or message content bytes received from backends over Fanout connections.
	FanoutBerespBodyBytes *int64 `json:"fanout_beresp_body_bytes,omitempty"`
	// Total header bytes received from backends over Fanout connections.
	FanoutBerespHeaderBytes *int64 `json:"fanout_beresp_header_bytes,omitempty"`
	// Total duration of Fanout connections with end users.
	FanoutConnTimeMs *int64 `json:"fanout_conn_time_ms,omitempty"`
	// Total published messages received from the publish API endpoint.
	FanoutRecvPublishes *int64 `json:"fanout_recv_publishes,omitempty"`
	// Total body or message content bytes received from end users over Fanout connections.
	FanoutReqBodyBytes *int64 `json:"fanout_req_body_bytes,omitempty"`
	// Total header bytes received from end users over Fanout connections.
	FanoutReqHeaderBytes *int64 `json:"fanout_req_header_bytes,omitempty"`
	// Total body or message content bytes sent to end users over Fanout connections, excluding published message content.
	FanoutRespBodyBytes *int64 `json:"fanout_resp_body_bytes,omitempty"`
	// Total header bytes sent to end users over Fanout connections.
	FanoutRespHeaderBytes *int64 `json:"fanout_resp_header_bytes,omitempty"`
	// Total published messages sent to end users.
	FanoutSendPublishes *int64 `json:"fanout_send_publishes,omitempty"`
	// Number of executions of the `vcl_fetch` Varnish subroutine.
	FetchSubCount *int64 `json:"fetch_sub_count,omitempty"`
	// Time spent inside the `vcl_fetch` Varnish subroutine (in seconds).
	FetchSubTime *float64 `json:"fetch_sub_time,omitempty"`
	// Number of executions of the `vcl_hash` Varnish subroutine.
	HashSubCount *int64 `json:"hash_sub_count,omitempty"`
	// Time spent inside the `vcl_hash` Varnish subroutine (in seconds).
	HashSubTime *float64 `json:"hash_sub_time,omitempty"`
	// Total header bytes delivered (alias for resp_header_bytes).
	HeaderSize *int64 `json:"header_size,omitempty"`
	// Ratio of cache hits to cache misses (between 0 and 1).
	HitRatio *float64 `json:"hit_ratio,omitempty"`
	// Total body bytes delivered for cache hits.
	HitRespBodyBytes *int64 `json:"hit_resp_body_bytes,omitempty"`
	// Number of executions of the `vcl_hit` Varnish subroutine.
	HitSubCount *int64 `json:"hit_sub_count,omitempty"`
	// Time spent inside the `vcl_hit` Varnish subroutine (in seconds).
	HitSubTime *float64 `json:"hit_sub_time,omitempty"`
	// Number of cache hits.
	Hits *int64 `json:"hits,omitempty"`
	// Total amount of time spent processing cache hits (in seconds).
	HitsTime *float64 `json:"hits_time,omitempty"`
	// Number of requests received over HTTP/2.
	Http2 *int64 `json:"http2,omitempty"`
	// Number of requests received over HTTP/3.
	Http3 *int64 `json:"http3,omitempty"`
	// Number of responses that came from the Fastly Image Optimizer service. If the service receives 10 requests for an image, this stat will be 10 regardless of how many times the image was transformed.
	Imgopto *int64 `json:"imgopto,omitempty"`
	// Total body bytes delivered from the Fastly Image Optimizer service, including shield traffic.
	ImgoptoRespBodyBytes *int64 `json:"imgopto_resp_body_bytes,omitempty"`
	// Total header bytes delivered from the Fastly Image Optimizer service, including shield traffic.
	ImgoptoRespHeaderBytes *int64 `json:"imgopto_resp_header_bytes,omitempty"`
	// Total body bytes delivered via a shield from the Fastly Image Optimizer service.
	ImgoptoShieldRespBodyBytes *int64 `json:"imgopto_shield_resp_body_bytes,omitempty"`
	// Total header bytes delivered via a shield from the Fastly Image Optimizer service.
	ImgoptoShieldRespHeaderBytes *int64 `json:"imgopto_shield_resp_header_bytes,omitempty"`
	// Number of video responses that came from the Fastly Image Optimizer service.
	Imgvideo *int64 `json:"imgvideo,omitempty"`
	// Number of video frames that came from the Fastly Image Optimizer service. A video frame is an individual image within a sequence of video.
	ImgvideoFrames *int64 `json:"imgvideo_frames,omitempty"`
	// Total body bytes of video delivered from the Fastly Image Optimizer service.
	ImgvideoRespBodyBytes *int64 `json:"imgvideo_resp_body_bytes,omitempty"`
	// Total header bytes of video delivered from the Fastly Image Optimizer service.
	ImgvideoRespHeaderBytes *int64 `json:"imgvideo_resp_header_bytes,omitempty"`
	// Number of video responses delivered via a shield that came from the Fastly Image Optimizer service.
	ImgvideoShield *int64 `json:"imgvideo_shield,omitempty"`
	// Number of video frames delivered via a shield that came from the Fastly Image Optimizer service. A video frame is an individual image within a sequence of video.
	ImgvideoShieldFrames *int64 `json:"imgvideo_shield_frames,omitempty"`
	// Total body bytes of video delivered via a shield from the Fastly Image Optimizer service.
	ImgvideoShieldRespBodyBytes *int64 `json:"imgvideo_shield_resp_body_bytes,omitempty"`
	// Total header bytes of video delivered via a shield from the Fastly Image Optimizer service.
	ImgvideoShieldRespHeaderBytes *int64 `json:"imgvideo_shield_resp_header_bytes,omitempty"`
	// Number of requests that were received over IPv6.
	Ipv6 *int64 `json:"ipv6,omitempty"`
	// Number of log lines sent.
	Log *int64 `json:"log,omitempty"`
	// Total log bytes sent.
	LogBytes *int64 `json:"log_bytes,omitempty"`
	// Number of cache misses.
	Miss *int64 `json:"miss,omitempty"`
	// Total body bytes delivered for cache misses.
	MissRespBodyBytes *int64 `json:"miss_resp_body_bytes,omitempty"`
	// Number of executions of the `vcl_miss` Varnish subroutine.
	MissSubCount *int64 `json:"miss_sub_count,omitempty"`
	// Time spent inside the `vcl_miss` Varnish subroutine (in seconds).
	MissSubTime *float64 `json:"miss_sub_time,omitempty"`
	// Total amount of time spent processing cache misses (in seconds).
	MissTime *float64 `json:"miss_time,omitempty"`
	// Number of objects served that were between 10KB and 100KB in size.
	ObjectSize100k *int64 `json:"object_size_100k,omitempty"`
	// Number of objects served that were between 10MB and 100MB in size.
	ObjectSize100m *int64 `json:"object_size_100m,omitempty"`
	// Number of objects served that were between 1KB and 10KB in size.
	ObjectSize10k *int64 `json:"object_size_10k,omitempty"`
	// Number of objects served that were between 1MB and 10MB in size.
	ObjectSize10m *int64 `json:"object_size_10m,omitempty"`
	// Number of objects served that were between 100MB and 1GB in size.
	ObjectSize1g *int64 `json:"object_size_1g,omitempty"`
	// Number of objects served that were under 1KB in size.
	ObjectSize1k *int64 `json:"object_size_1k,omitempty"`
	// Number of objects served that were between 100KB and 1MB in size.
	ObjectSize1m *int64 `json:"object_size_1m,omitempty"`
	// The total number of class a operations for the object store.
	ObjectStoreClassAOperations *int64 `json:"object_store_class_a_operations,omitempty"`
	// The total number of class b operations for the object store.
	ObjectStoreClassBOperations *int64 `json:"object_store_class_b_operations,omitempty"`
	// Use object_store_class_b_operations.
	//
	// Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible.
	ObjectStoreReadRequests *int64 `json:"object_store_read_requests,omitempty"`
	// Use object_store_class_a_operations.
	//
	// Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible.
	ObjectStoreWriteRequests *int64 `json:"object_store_write_requests,omitempty"`
	// Body bytes received from origin for cacheable content.
	OriginCacheFetchRespBodyBytes *int64 `json:"origin_cache_fetch_resp_body_bytes,omitempty"`
	// Header bytes received from an origin for cacheable content.
	OriginCacheFetchRespHeaderBytes *int64 `json:"origin_cache_fetch_resp_header_bytes,omitempty"`
	// The total number of completed requests made to backends (origins) that returned cacheable content.
	OriginCacheFetches *int64 `json:"origin_cache_fetches,omitempty"`
	// Total request body bytes sent to origin.
	OriginFetchBodyBytes *int64 `json:"origin_fetch_body_bytes,omitempty"`
	// Total request header bytes sent to origin.
	OriginFetchHeaderBytes *int64 `json:"origin_fetch_header_bytes,omitempty"`
	// Total body bytes received from origin.
	OriginFetchRespBodyBytes *int64 `json:"origin_fetch_resp_body_bytes,omitempty"`
	// Total header bytes received from origin.
	OriginFetchRespHeaderBytes *int64 `json:"origin_fetch_resp_header_bytes,omitempty"`
	// Number of requests sent to origin.
	OriginFetches *int64 `json:"origin_fetches,omitempty"`
	// Number of responses received from origin with a `304` status code in response to an `If-Modified-Since` or `If-None-Match` request. Under regular scenarios, a revalidation will imply a cache hit. However, if using Fastly Image Optimizer or segmented caching this may result in a cache miss.
	OriginRevalidations *int64 `json:"origin_revalidations,omitempty"`
	// Number of responses that came from the Fastly On-the-Fly Packaging service for video-on-demand.
	Otfp *int64 `json:"otfp,omitempty"`
	// Total amount of time spent delivering a response from the Fastly On-the-Fly Packaging service for video-on-demand (in seconds).
	OtfpDeliverTime *float64 `json:"otfp_deliver_time,omitempty"`
	// Number of responses that were manifest files from the Fastly On-the-Fly Packaging service for video-on-demand.
	OtfpManifests *int64 `json:"otfp_manifests,omitempty"`
	// Total body bytes delivered from the Fastly On-the-Fly Packaging service for video-on-demand.
	OtfpRespBodyBytes *int64 `json:"otfp_resp_body_bytes,omitempty"`
	// Total header bytes delivered from the Fastly On-the-Fly Packaging service for video-on-demand.
	OtfpRespHeaderBytes *int64 `json:"otfp_resp_header_bytes,omitempty"`
	// Total body bytes delivered via a shield for the Fastly On-the-Fly Packaging service for video-on-demand.
	OtfpShieldRespBodyBytes *int64 `json:"otfp_shield_resp_body_bytes,omitempty"`
	// Total header bytes delivered via a shield for the Fastly On-the-Fly Packaging service for video-on-demand.
	OtfpShieldRespHeaderBytes *int64 `json:"otfp_shield_resp_header_bytes,omitempty"`
	// Total amount of time spent delivering a response via a shield from the Fastly On-the-Fly Packaging service for video-on-demand (in seconds).
	OtfpShieldTime *float64 `json:"otfp_shield_time,omitempty"`
	// Number of requests that passed through the CDN without being cached.
	Pass *int64 `json:"pass,omitempty"`
	// Total body bytes delivered for cache passes.
	PassRespBodyBytes *int64 `json:"pass_resp_body_bytes,omitempty"`
	// Number of executions of the `vcl_pass` Varnish subroutine.
	PassSubCount *int64 `json:"pass_sub_count,omitempty"`
	// Time spent inside the `vcl_pass` Varnish subroutine (in seconds).
	PassSubTime *float64 `json:"pass_sub_time,omitempty"`
	// Total amount of time spent processing cache passes (in seconds).
	PassTime *float64 `json:"pass_time,omitempty"`
	// Number of responses with the PCI flag turned on.
	Pci *int64 `json:"pci,omitempty"`
	// Optional. Pipe operations performed (legacy feature).
	Pipe *int64 `json:"pipe,omitempty"`
	// Number of executions of the `vcl_pipe` Varnish subroutine.
	PipeSubCount *int64 `json:"pipe_sub_count,omitempty"`
	// Time spent inside the `vcl_pipe` Varnish subroutine (in seconds).
	PipeSubTime *float64 `json:"pipe_sub_time,omitempty"`
	// Number of executions of the `vcl_predeliver` Varnish subroutine.
	PredeliverSubCount *int64 `json:"predeliver_sub_count,omitempty"`
	// Time spent inside the `vcl_predeliver` Varnish subroutine (in seconds).
	PredeliverSubTime *float64 `json:"predeliver_sub_time,omitempty"`
	// Number of executions of the `vcl_prehash` Varnish subroutine.
	PrehashSubCount *int64 `json:"prehash_sub_count,omitempty"`
	// Time spent inside the `vcl_prehash` Varnish subroutine (in seconds).
	PrehashSubTime *float64 `json:"prehash_sub_time,omitempty"`
	// Number of executions of the `vcl_recv` Varnish subroutine.
	RecvSubCount *int64 `json:"recv_sub_count,omitempty"`
	// Time spent inside the `vcl_recv` Varnish subroutine (in seconds).
	RecvSubTime *float64 `json:"recv_sub_time,omitempty"`
	// Total body bytes received.
	ReqBodyBytes *int64 `json:"req_body_bytes,omitempty"`
	// Total header bytes received.
	ReqHeaderBytes *int64 `json:"req_header_bytes,omitempty"`
	// Number of requests processed.
	Requests *int64 `json:"requests,omitempty"`
	// Total body bytes delivered (edge_resp_body_bytes + shield_resp_body_bytes).
	RespBodyBytes *int64 `json:"resp_body_bytes,omitempty"`
	// Total header bytes delivered (edge_resp_header_bytes + shield_resp_header_bytes).
	RespHeaderBytes *int64 `json:"resp_header_bytes,omitempty"`
	// Number of restarts performed.
	Restarts *int64 `json:"restarts,omitempty"`
	// Number of `Range` requests to origin for segments of resources when using segmented caching.
	SegblockOriginFetches *int64 `json:"segblock_origin_fetches,omitempty"`
	// Number of `Range` requests to a shield for segments of resources when using segmented caching.
	SegblockShieldFetches *int64 `json:"segblock_shield_fetches,omitempty"`
	// Number of requests from edge to the shield POP.
	Shield *int64 `json:"shield,omitempty"`
	// The total number of completed requests made to shields that returned cacheable content.
	ShieldCacheFetches *int64 `json:"shield_cache_fetches,omitempty"`
	// Total request body bytes sent to a shield.
	ShieldFetchBodyBytes *int64 `json:"shield_fetch_body_bytes,omitempty"`
	// Total request header bytes sent to a shield.
	ShieldFetchHeaderBytes *int64 `json:"shield_fetch_header_bytes,omitempty"`
	// Total response body bytes sent from a shield to the edge.
	ShieldFetchRespBodyBytes *int64 `json:"shield_fetch_resp_body_bytes,omitempty"`
	// Total response header bytes sent from a shield to the edge.
	ShieldFetchRespHeaderBytes *int64 `json:"shield_fetch_resp_header_bytes,omitempty"`
	// Number of requests made from one Fastly POP to another, as part of shielding.
	ShieldFetches *int64 `json:"shield_fetches,omitempty"`
	// Number of requests that resulted in a hit at a shield.
	ShieldHitRequests *int64 `json:"shield_hit_requests,omitempty"`
	// Body bytes delivered for shield hits.
	ShieldHitRespBodyBytes *int64 `json:"shield_hit_resp_body_bytes,omitempty"`
	// Header bytes delivered for shield hits.
	ShieldHitRespHeaderBytes *int64 `json:"shield_hit_resp_header_bytes,omitempty"`
	// Number of requests that resulted in a miss at a shield.
	ShieldMissRequests *int64 `json:"shield_miss_requests,omitempty"`
	// Body bytes delivered for shield misses.
	ShieldMissRespBodyBytes *int64 `json:"shield_miss_resp_body_bytes,omitempty"`
	// Header bytes delivered for shield misses.
	ShieldMissRespHeaderBytes *int64 `json:"shield_miss_resp_header_bytes,omitempty"`
	// Total body bytes delivered via a shield.
	ShieldRespBodyBytes *int64 `json:"shield_resp_body_bytes,omitempty"`
	// Total header bytes delivered via a shield.
	ShieldRespHeaderBytes *int64 `json:"shield_resp_header_bytes,omitempty"`
	// Number of responses received from origin with a `304` status code, in response to an `If-Modified-Since` or `If-None-Match` request to a shield. Under regular scenarios, a revalidation will imply a cache hit. However, if using segmented caching this may result in a cache miss.
	ShieldRevalidations *int64 `json:"shield_revalidations,omitempty"`
	// Number of "Informational" category status codes delivered.
	Status1xx *int64 `json:"status_1xx,omitempty"`
	// Number of responses sent with status code 200 (Success).
	Status200 *int64 `json:"status_200,omitempty"`
	// Number of responses sent with status code 204 (No Content).
	Status204 *int64 `json:"status_204,omitempty"`
	// Number of responses sent with status code 206 (Partial Content).
	Status206 *int64 `json:"status_206,omitempty"`
	// Number of "Success" status codes delivered.
	Status2xx *int64 `json:"status_2xx,omitempty"`
	// Number of responses sent with status code 301 (Moved Permanently).
	Status301 *int64 `json:"status_301,omitempty"`
	// Number of responses sent with status code 302 (Found).
	Status302 *int64 `json:"status_302,omitempty"`
	// Number of responses sent with status code 304 (Not Modified).
	Status304 *int64 `json:"status_304,omitempty"`
	// Number of "Redirection" codes delivered.
	Status3xx *int64 `json:"status_3xx,omitempty"`
	// Number of responses sent with status code 400 (Bad Request).
	Status400 *int64 `json:"status_400,omitempty"`
	// Number of responses sent with status code 401 (Unauthorized).
	Status401 *int64 `json:"status_401,omitempty"`
	// Number of responses sent with status code 403 (Forbidden).
	Status403 *int64 `json:"status_403,omitempty"`
	// Number of responses sent with status code 404 (Not Found).
	Status404 *int64 `json:"status_404,omitempty"`
	// Number of responses sent with status code 406 (Not Acceptable).
	Status406 *int64 `json:"status_406,omitempty"`
	// Number of responses sent with status code 416 (Range Not Satisfiable).
	Status416 *int64 `json:"status_416,omitempty"`
	// Number of responses sent with status code 429 (Too Many Requests).
	Status429 *int64 `json:"status_429,omitempty"`
	// Number of "Client Error" codes delivered.
	Status4xx *int64 `json:"status_4xx,omitempty"`
	// Number of responses sent with status code 500 (Internal Server Error).
	Status500 *int64 `json:"status_500,omitempty"`
	// Number of responses sent with status code 501 (Not Implemented).
	Status501 *int64 `json:"status_501,omitempty"`
	// Number of responses sent with status code 502 (Bad Gateway).
	Status502 *int64 `json:"status_502,omitempty"`
	// Number of responses sent with status code 503 (Service Unavailable).
	Status503 *int64 `json:"status_503,omitempty"`
	// Number of responses sent with status code 504 (Gateway Timeout).
	Status504 *int64 `json:"status_504,omitempty"`
	// Number of responses sent with status code 505 (HTTP Version Not Supported).
	Status505 *int64 `json:"status_505,omitempty"`
	// Number of "Server Error" codes delivered.
	Status5xx *int64 `json:"status_5xx,omitempty"`
	// Number of requests that returned a synthetic response (i.e., response objects created with the `synthetic` VCL statement).
	Synth *int64 `json:"synth,omitempty"`
	// Number of requests that were received over TLS.
	TLS *int64 `json:"tls,omitempty"`
	// Number of bytes transferred during TLS handshake.
	TLSHandshakeSentBytes *int64 `json:"tls_handshake_sent_bytes,omitempty"`
	// Number of requests received over TLS 1.0.
	TLSV10 *int64 `json:"tls_v10,omitempty"`
	// Number of requests received over TLS 1.1.
	TLSV11 *int64 `json:"tls_v11,omitempty"`
	// Number of requests received over TLS 1.2.
	TLSV12 *int64 `json:"tls_v12,omitempty"`
	// Number of requests received over TLS 1.3.
	TLSV13 *int64 `json:"tls_v13,omitempty"`
	// Number of requests that were designated uncachable.
	Uncacheable *int64 `json:"uncacheable,omitempty"`
	// Number of responses with the video segment or video manifest MIME type (i.e., application/x-mpegurl, application/vnd.apple.mpegurl, application/f4m, application/dash+xml, application/vnd.ms-sstr+xml, ideo/mp2t, audio/aac, video/f4f, video/x-flv, video/mp4, audio/mp4).
	Video *int64 `json:"video,omitempty"`
	// Number of requests that triggered a WAF rule and were blocked.
	WafBlocked *int64 `json:"waf_blocked,omitempty"`
	// Number of requests that triggered a WAF rule and were logged.
	WafLogged *int64 `json:"waf_logged,omitempty"`
	// Number of requests that triggered a WAF rule and were passed.
	WafPassed *int64 `json:"waf_passed,omitempty"`
	// Total message content bytes sent to backends over passthrough WebSocket connections.
	WebsocketBereqBodyBytes *int64 `json:"websocket_bereq_body_bytes,omitempty"`
	// Total header bytes sent to backends over passthrough WebSocket connections.
	WebsocketBereqHeaderBytes *int64 `json:"websocket_bereq_header_bytes,omitempty"`
	// Total message content bytes received from backends over passthrough WebSocket connections.
	WebsocketBerespBodyBytes *int64 `json:"websocket_beresp_body_bytes,omitempty"`
	// Total header bytes received from backends over passthrough WebSocket connections.
	WebsocketBerespHeaderBytes *int64 `json:"websocket_beresp_header_bytes,omitempty"`
	// Total duration of passthrough WebSocket connections with end users.
	WebsocketConnTimeMs *int64 `json:"websocket_conn_time_ms,omitempty"`
	// Total message content bytes received from end users over passthrough WebSocket connections.
	WebsocketReqBodyBytes *int64 `json:"websocket_req_body_bytes,omitempty"`
	// Total header bytes received from end users over passthrough WebSocket connections.
	WebsocketReqHeaderBytes *int64 `json:"websocket_req_header_bytes,omitempty"`
	// Total message content bytes sent to end users over passthrough WebSocket connections.
	WebsocketRespBodyBytes *int64 `json:"websocket_resp_body_bytes,omitempty"`
	// Total header bytes sent to end users over passthrough WebSocket connections.
	WebsocketRespHeaderBytes *int64 `json:"websocket_resp_header_bytes,omitempty"`
}
