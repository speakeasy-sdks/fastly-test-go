// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"Fastly/pkg/utils"
	"encoding/json"
	"fmt"
)

// LoggingBigqueryFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingBigqueryFormatVersion int64

const (
	LoggingBigqueryFormatVersionOne LoggingBigqueryFormatVersion = 1
	LoggingBigqueryFormatVersionTwo LoggingBigqueryFormatVersion = 2
)

func (e LoggingBigqueryFormatVersion) ToPointer() *LoggingBigqueryFormatVersion {
	return &e
}

func (e *LoggingBigqueryFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingBigqueryFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingBigqueryFormatVersion: %v", v)
	}
}

// LoggingBigqueryPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingBigqueryPlacement string

const (
	LoggingBigqueryPlacementNone                   LoggingBigqueryPlacement = "none"
	LoggingBigqueryPlacementWafDebug               LoggingBigqueryPlacement = "waf_debug"
	LoggingBigqueryPlacementLessThanNilGreaterThan LoggingBigqueryPlacement = "<nil>"
)

func (e LoggingBigqueryPlacement) ToPointer() *LoggingBigqueryPlacement {
	return &e
}

func (e *LoggingBigqueryPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingBigqueryPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingBigqueryPlacement: %v", v)
	}
}

type LoggingBigquery struct {
	// The name of the Google Cloud Platform service account associated with the target log collection service. Not required if `user` and `secret_key` are provided.
	AccountName *string `form:"name=account_name"`
	// Your BigQuery dataset.
	Dataset *string `form:"name=dataset"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce JSON that matches the schema of your BigQuery table.
	Format *string `form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingBigqueryFormatVersion `default:"2" form:"name=format_version"`
	// The name of the BigQuery logging object. Used as a primary key for API access.
	Name *string `form:"name=name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingBigqueryPlacement `form:"name=placement"`
	// Your Google Cloud Platform project ID. Required
	ProjectID *string `form:"name=project_id"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// Your Google Cloud Platform account secret key. The `private_key` field in your service account authentication JSON. Not required if `account_name` is specified.
	SecretKey *string `form:"name=secret_key"`
	// Your BigQuery table.
	Table *string `form:"name=table"`
	// BigQuery table name suffix template. Optional.
	TemplateSuffix *string `form:"name=template_suffix"`
	// Your Google Cloud Platform service account email address. The `client_email` field in your service account authentication JSON. Not required if `account_name` is specified.
	User *string `form:"name=user"`
}

func (l LoggingBigquery) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingBigquery) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingBigquery) GetAccountName() *string {
	if o == nil {
		return nil
	}
	return o.AccountName
}

func (o *LoggingBigquery) GetDataset() *string {
	if o == nil {
		return nil
	}
	return o.Dataset
}

func (o *LoggingBigquery) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingBigquery) GetFormatVersion() *LoggingBigqueryFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingBigquery) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingBigquery) GetPlacement() *LoggingBigqueryPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingBigquery) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *LoggingBigquery) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingBigquery) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

func (o *LoggingBigquery) GetTable() *string {
	if o == nil {
		return nil
	}
	return o.Table
}

func (o *LoggingBigquery) GetTemplateSuffix() *string {
	if o == nil {
		return nil
	}
	return o.TemplateSuffix
}

func (o *LoggingBigquery) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
