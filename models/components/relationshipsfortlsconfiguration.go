// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/speakeasy-sdks/fastly-test-go/internal/utils"
)

type DNSRecords struct {
	Data []RelationshipMemberTLSDNSRecord `json:"data,omitempty"`
}

func (o *DNSRecords) GetData() []RelationshipMemberTLSDNSRecord {
	if o == nil {
		return nil
	}
	return o.Data
}

// Two - The [DNS records](/reference/api/tls/custom-certs/dns-records/) to use for this configuration.
type Two struct {
	DNSRecords *DNSRecords `json:"dns_records,omitempty"`
}

func (o *Two) GetDNSRecords() *DNSRecords {
	if o == nil {
		return nil
	}
	return o.DNSRecords
}

// One - The [Fastly Service](/reference/api/services/service/) that is automatically selected when this TLS Configuration is used.
type One struct {
	Service *RelationshipMemberService `json:"service,omitempty"`
}

func (o *One) GetService() *RelationshipMemberService {
	if o == nil {
		return nil
	}
	return o.Service
}

type RelationshipsForTLSConfigurationType string

const (
	RelationshipsForTLSConfigurationTypeOne RelationshipsForTLSConfigurationType = "1"
	RelationshipsForTLSConfigurationTypeTwo RelationshipsForTLSConfigurationType = "2"
)

type RelationshipsForTLSConfiguration struct {
	One *One
	Two *Two

	Type RelationshipsForTLSConfigurationType
}

func CreateRelationshipsForTLSConfigurationOne(one One) RelationshipsForTLSConfiguration {
	typ := RelationshipsForTLSConfigurationTypeOne

	return RelationshipsForTLSConfiguration{
		One:  &one,
		Type: typ,
	}
}

func CreateRelationshipsForTLSConfigurationTwo(two Two) RelationshipsForTLSConfiguration {
	typ := RelationshipsForTLSConfigurationTypeTwo

	return RelationshipsForTLSConfiguration{
		Two:  &two,
		Type: typ,
	}
}

func (u *RelationshipsForTLSConfiguration) UnmarshalJSON(data []byte) error {

	one := One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = RelationshipsForTLSConfigurationTypeOne
		return nil
	}

	two := Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = RelationshipsForTLSConfigurationTypeTwo
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RelationshipsForTLSConfiguration) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
