// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/speakeasy-sdks/fastly-test-go/v2/internal/utils"
)

type DNSRecords struct {
	Data []RelationshipMemberTLSDNSRecord `json:"data,omitempty"`
}

func (o *DNSRecords) GetData() []RelationshipMemberTLSDNSRecord {
	if o == nil {
		return nil
	}
	return o.Data
}

// RelationshipsForTLSConfiguration2 - The [DNS records](/reference/api/tls/custom-certs/dns-records/) to use for this configuration.
type RelationshipsForTLSConfiguration2 struct {
	DNSRecords *DNSRecords `json:"dns_records,omitempty"`
}

func (o *RelationshipsForTLSConfiguration2) GetDNSRecords() *DNSRecords {
	if o == nil {
		return nil
	}
	return o.DNSRecords
}

// RelationshipsForTLSConfiguration1 - The [Fastly Service](/reference/api/services/service/) that is automatically selected when this TLS Configuration is used.
type RelationshipsForTLSConfiguration1 struct {
	Service *RelationshipMemberService `json:"service,omitempty"`
}

func (o *RelationshipsForTLSConfiguration1) GetService() *RelationshipMemberService {
	if o == nil {
		return nil
	}
	return o.Service
}

type RelationshipsForTLSConfigurationType string

const (
	RelationshipsForTLSConfigurationTypeRelationshipsForTLSConfiguration1 RelationshipsForTLSConfigurationType = "relationships_for_tls_configuration_1"
	RelationshipsForTLSConfigurationTypeRelationshipsForTLSConfiguration2 RelationshipsForTLSConfigurationType = "relationships_for_tls_configuration_2"
)

type RelationshipsForTLSConfiguration struct {
	RelationshipsForTLSConfiguration1 *RelationshipsForTLSConfiguration1
	RelationshipsForTLSConfiguration2 *RelationshipsForTLSConfiguration2

	Type RelationshipsForTLSConfigurationType
}

func CreateRelationshipsForTLSConfigurationRelationshipsForTLSConfiguration1(relationshipsForTLSConfiguration1 RelationshipsForTLSConfiguration1) RelationshipsForTLSConfiguration {
	typ := RelationshipsForTLSConfigurationTypeRelationshipsForTLSConfiguration1

	return RelationshipsForTLSConfiguration{
		RelationshipsForTLSConfiguration1: &relationshipsForTLSConfiguration1,
		Type:                              typ,
	}
}

func CreateRelationshipsForTLSConfigurationRelationshipsForTLSConfiguration2(relationshipsForTLSConfiguration2 RelationshipsForTLSConfiguration2) RelationshipsForTLSConfiguration {
	typ := RelationshipsForTLSConfigurationTypeRelationshipsForTLSConfiguration2

	return RelationshipsForTLSConfiguration{
		RelationshipsForTLSConfiguration2: &relationshipsForTLSConfiguration2,
		Type:                              typ,
	}
}

func (u *RelationshipsForTLSConfiguration) UnmarshalJSON(data []byte) error {

	relationshipsForTLSConfiguration1 := RelationshipsForTLSConfiguration1{}
	if err := utils.UnmarshalJSON(data, &relationshipsForTLSConfiguration1, "", true, true); err == nil {
		u.RelationshipsForTLSConfiguration1 = &relationshipsForTLSConfiguration1
		u.Type = RelationshipsForTLSConfigurationTypeRelationshipsForTLSConfiguration1
		return nil
	}

	relationshipsForTLSConfiguration2 := RelationshipsForTLSConfiguration2{}
	if err := utils.UnmarshalJSON(data, &relationshipsForTLSConfiguration2, "", true, true); err == nil {
		u.RelationshipsForTLSConfiguration2 = &relationshipsForTLSConfiguration2
		u.Type = RelationshipsForTLSConfigurationTypeRelationshipsForTLSConfiguration2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RelationshipsForTLSConfiguration) MarshalJSON() ([]byte, error) {
	if u.RelationshipsForTLSConfiguration1 != nil {
		return utils.MarshalJSON(u.RelationshipsForTLSConfiguration1, "", true)
	}

	if u.RelationshipsForTLSConfiguration2 != nil {
		return utils.MarshalJSON(u.RelationshipsForTLSConfiguration2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
