// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Action - If set, will cause vcl_fetch to terminate after processing this rule with the return state specified. If not set, other configuration logic in vcl_fetch with a lower priority will run after this rule.
type Action string

const (
	ActionPass    Action = "pass"
	ActionCache   Action = "cache"
	ActionRestart Action = "restart"
)

func (e Action) ToPointer() *Action {
	return &e
}

func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pass":
		fallthrough
	case "cache":
		fallthrough
	case "restart":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

type CacheSetting struct {
	// If set, will cause vcl_fetch to terminate after processing this rule with the return state specified. If not set, other configuration logic in vcl_fetch with a lower priority will run after this rule.
	//
	Action *Action `form:"name=action"`
	// Name of the cache condition controlling when this configuration applies.
	CacheCondition *string `form:"name=cache_condition"`
	// Name for the cache settings object.
	Name *string `form:"name=name"`
	// Maximum time in seconds to continue to use a stale version of the object if future requests to your backend server fail (also known as 'stale if error').
	StaleTTL *int64 `form:"name=stale_ttl"`
	// Maximum time to consider the object fresh in the cache (the cache 'time to live').
	TTL *int64 `form:"name=ttl"`
}

func (o *CacheSetting) GetAction() *Action {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CacheSetting) GetCacheCondition() *string {
	if o == nil {
		return nil
	}
	return o.CacheCondition
}

func (o *CacheSetting) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CacheSetting) GetStaleTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.StaleTTL
}

func (o *CacheSetting) GetTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.TTL
}
