// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/speakeasy-sdks/fastly-test-go/v2/internal/utils"
)

type RelationshipsForTLSBulkCertificateInputType string

const (
	RelationshipsForTLSBulkCertificateInputTypeRelationshipTLSConfigurationsInput RelationshipsForTLSBulkCertificateInputType = "relationship_tls_configurations_input"
	RelationshipsForTLSBulkCertificateInputTypeRelationshipTLSDomainsInput        RelationshipsForTLSBulkCertificateInputType = "relationship_tls_domains_input"
)

type RelationshipsForTLSBulkCertificateInput struct {
	RelationshipTLSConfigurationsInput *RelationshipTLSConfigurationsInput
	RelationshipTLSDomainsInput        *RelationshipTLSDomainsInput

	Type RelationshipsForTLSBulkCertificateInputType
}

func CreateRelationshipsForTLSBulkCertificateInputRelationshipTLSConfigurationsInput(relationshipTLSConfigurationsInput RelationshipTLSConfigurationsInput) RelationshipsForTLSBulkCertificateInput {
	typ := RelationshipsForTLSBulkCertificateInputTypeRelationshipTLSConfigurationsInput

	return RelationshipsForTLSBulkCertificateInput{
		RelationshipTLSConfigurationsInput: &relationshipTLSConfigurationsInput,
		Type:                               typ,
	}
}

func CreateRelationshipsForTLSBulkCertificateInputRelationshipTLSDomainsInput(relationshipTLSDomainsInput RelationshipTLSDomainsInput) RelationshipsForTLSBulkCertificateInput {
	typ := RelationshipsForTLSBulkCertificateInputTypeRelationshipTLSDomainsInput

	return RelationshipsForTLSBulkCertificateInput{
		RelationshipTLSDomainsInput: &relationshipTLSDomainsInput,
		Type:                        typ,
	}
}

func (u *RelationshipsForTLSBulkCertificateInput) UnmarshalJSON(data []byte) error {

	relationshipTLSConfigurationsInput := RelationshipTLSConfigurationsInput{}
	if err := utils.UnmarshalJSON(data, &relationshipTLSConfigurationsInput, "", true, true); err == nil {
		u.RelationshipTLSConfigurationsInput = &relationshipTLSConfigurationsInput
		u.Type = RelationshipsForTLSBulkCertificateInputTypeRelationshipTLSConfigurationsInput
		return nil
	}

	relationshipTLSDomainsInput := RelationshipTLSDomainsInput{}
	if err := utils.UnmarshalJSON(data, &relationshipTLSDomainsInput, "", true, true); err == nil {
		u.RelationshipTLSDomainsInput = &relationshipTLSDomainsInput
		u.Type = RelationshipsForTLSBulkCertificateInputTypeRelationshipTLSDomainsInput
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RelationshipsForTLSBulkCertificateInput) MarshalJSON() ([]byte, error) {
	if u.RelationshipTLSConfigurationsInput != nil {
		return utils.MarshalJSON(u.RelationshipTLSConfigurationsInput, "", true)
	}

	if u.RelationshipTLSDomainsInput != nil {
		return utils.MarshalJSON(u.RelationshipTLSDomainsInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
