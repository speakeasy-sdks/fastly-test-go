// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/fastly-test-go/internal/utils"
)

// ServiceInvitationDataPermission - The permission the accepting user will have in relation to the service.
type ServiceInvitationDataPermission string

const (
	ServiceInvitationDataPermissionFull        ServiceInvitationDataPermission = "full"
	ServiceInvitationDataPermissionReadOnly    ServiceInvitationDataPermission = "read_only"
	ServiceInvitationDataPermissionPurgeSelect ServiceInvitationDataPermission = "purge_select"
	ServiceInvitationDataPermissionPurgeAll    ServiceInvitationDataPermission = "purge_all"
)

func (e ServiceInvitationDataPermission) ToPointer() *ServiceInvitationDataPermission {
	return &e
}

func (e *ServiceInvitationDataPermission) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "full":
		fallthrough
	case "read_only":
		fallthrough
	case "purge_select":
		fallthrough
	case "purge_all":
		*e = ServiceInvitationDataPermission(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceInvitationDataPermission: %v", v)
	}
}

type ServiceInvitationDataAttributes struct {
	// The permission the accepting user will have in relation to the service.
	Permission *ServiceInvitationDataPermission `default:"full" json:"permission"`
}

func (s ServiceInvitationDataAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceInvitationDataAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ServiceInvitationDataAttributes) GetPermission() *ServiceInvitationDataPermission {
	if o == nil {
		return nil
	}
	return o.Permission
}

// ServiceInvitationDataRelationships - Service the accepting user will have access to.
type ServiceInvitationDataRelationships struct {
	Service *RelationshipMemberServiceInput `json:"service,omitempty"`
}

func (o *ServiceInvitationDataRelationships) GetService() *RelationshipMemberServiceInput {
	if o == nil {
		return nil
	}
	return o.Service
}

type ServiceInvitationData struct {
	Attributes *ServiceInvitationDataAttributes `json:"attributes,omitempty"`
	// Service the accepting user will have access to.
	Relationships *ServiceInvitationDataRelationships `json:"relationships,omitempty"`
	// Resource type
	Type *TypeServiceInvitation `default:"service_invitation" json:"type"`
}

func (s ServiceInvitationData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceInvitationData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ServiceInvitationData) GetAttributes() *ServiceInvitationDataAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *ServiceInvitationData) GetRelationships() *ServiceInvitationDataRelationships {
	if o == nil {
		return nil
	}
	return o.Relationships
}

func (o *ServiceInvitationData) GetType() *TypeServiceInvitation {
	if o == nil {
		return nil
	}
	return o.Type
}
