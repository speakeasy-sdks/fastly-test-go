// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/speakeasy-sdks/fastly-test-go/v2/internal/utils"
)

type RelationshipsForTLSConfigurationDNSRecords struct {
	Data []RelationshipMemberTLSDNSRecordInput `json:"data,omitempty"`
}

func (o *RelationshipsForTLSConfigurationDNSRecords) GetData() []RelationshipMemberTLSDNSRecordInput {
	if o == nil {
		return nil
	}
	return o.Data
}

// RelationshipsForTLSConfiguration2Input - The [DNS records](/reference/api/tls/custom-certs/dns-records/) to use for this configuration.
type RelationshipsForTLSConfiguration2Input struct {
	DNSRecords *RelationshipsForTLSConfigurationDNSRecords `json:"dns_records,omitempty"`
}

func (o *RelationshipsForTLSConfiguration2Input) GetDNSRecords() *RelationshipsForTLSConfigurationDNSRecords {
	if o == nil {
		return nil
	}
	return o.DNSRecords
}

// RelationshipsForTLSConfiguration1Input - The [Fastly Service](/reference/api/services/service/) that is automatically selected when this TLS Configuration is used.
type RelationshipsForTLSConfiguration1Input struct {
	Service *RelationshipMemberServiceInput `json:"service,omitempty"`
}

func (o *RelationshipsForTLSConfiguration1Input) GetService() *RelationshipMemberServiceInput {
	if o == nil {
		return nil
	}
	return o.Service
}

type RelationshipsForTLSConfigurationInputType string

const (
	RelationshipsForTLSConfigurationInputTypeRelationshipsForTLSConfiguration1Input RelationshipsForTLSConfigurationInputType = "relationships_for_tls_configuration_1_input"
	RelationshipsForTLSConfigurationInputTypeRelationshipsForTLSConfiguration2Input RelationshipsForTLSConfigurationInputType = "relationships_for_tls_configuration_2_input"
)

type RelationshipsForTLSConfigurationInput struct {
	RelationshipsForTLSConfiguration1Input *RelationshipsForTLSConfiguration1Input
	RelationshipsForTLSConfiguration2Input *RelationshipsForTLSConfiguration2Input

	Type RelationshipsForTLSConfigurationInputType
}

func CreateRelationshipsForTLSConfigurationInputRelationshipsForTLSConfiguration1Input(relationshipsForTLSConfiguration1Input RelationshipsForTLSConfiguration1Input) RelationshipsForTLSConfigurationInput {
	typ := RelationshipsForTLSConfigurationInputTypeRelationshipsForTLSConfiguration1Input

	return RelationshipsForTLSConfigurationInput{
		RelationshipsForTLSConfiguration1Input: &relationshipsForTLSConfiguration1Input,
		Type:                                   typ,
	}
}

func CreateRelationshipsForTLSConfigurationInputRelationshipsForTLSConfiguration2Input(relationshipsForTLSConfiguration2Input RelationshipsForTLSConfiguration2Input) RelationshipsForTLSConfigurationInput {
	typ := RelationshipsForTLSConfigurationInputTypeRelationshipsForTLSConfiguration2Input

	return RelationshipsForTLSConfigurationInput{
		RelationshipsForTLSConfiguration2Input: &relationshipsForTLSConfiguration2Input,
		Type:                                   typ,
	}
}

func (u *RelationshipsForTLSConfigurationInput) UnmarshalJSON(data []byte) error {

	relationshipsForTLSConfiguration1Input := RelationshipsForTLSConfiguration1Input{}
	if err := utils.UnmarshalJSON(data, &relationshipsForTLSConfiguration1Input, "", true, true); err == nil {
		u.RelationshipsForTLSConfiguration1Input = &relationshipsForTLSConfiguration1Input
		u.Type = RelationshipsForTLSConfigurationInputTypeRelationshipsForTLSConfiguration1Input
		return nil
	}

	relationshipsForTLSConfiguration2Input := RelationshipsForTLSConfiguration2Input{}
	if err := utils.UnmarshalJSON(data, &relationshipsForTLSConfiguration2Input, "", true, true); err == nil {
		u.RelationshipsForTLSConfiguration2Input = &relationshipsForTLSConfiguration2Input
		u.Type = RelationshipsForTLSConfigurationInputTypeRelationshipsForTLSConfiguration2Input
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RelationshipsForTLSConfigurationInput) MarshalJSON() ([]byte, error) {
	if u.RelationshipsForTLSConfiguration1Input != nil {
		return utils.MarshalJSON(u.RelationshipsForTLSConfiguration1Input, "", true)
	}

	if u.RelationshipsForTLSConfiguration2Input != nil {
		return utils.MarshalJSON(u.RelationshipsForTLSConfiguration2Input, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
