// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/fastly-test-go/internal/utils"
)

// LoggingDigitaloceanCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingDigitaloceanCompressionCodec string

const (
	LoggingDigitaloceanCompressionCodecZstd   LoggingDigitaloceanCompressionCodec = "zstd"
	LoggingDigitaloceanCompressionCodecSnappy LoggingDigitaloceanCompressionCodec = "snappy"
	LoggingDigitaloceanCompressionCodecGzip   LoggingDigitaloceanCompressionCodec = "gzip"
)

func (e LoggingDigitaloceanCompressionCodec) ToPointer() *LoggingDigitaloceanCompressionCodec {
	return &e
}

func (e *LoggingDigitaloceanCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingDigitaloceanCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanCompressionCodec: %v", v)
	}
}

// LoggingDigitaloceanFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingDigitaloceanFormatVersion int64

const (
	LoggingDigitaloceanFormatVersionOne LoggingDigitaloceanFormatVersion = 1
	LoggingDigitaloceanFormatVersionTwo LoggingDigitaloceanFormatVersion = 2
)

func (e LoggingDigitaloceanFormatVersion) ToPointer() *LoggingDigitaloceanFormatVersion {
	return &e
}

func (e *LoggingDigitaloceanFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingDigitaloceanFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanFormatVersion: %v", v)
	}
}

// LoggingDigitaloceanMessageType - How the message should be formatted.
type LoggingDigitaloceanMessageType string

const (
	LoggingDigitaloceanMessageTypeClassic LoggingDigitaloceanMessageType = "classic"
	LoggingDigitaloceanMessageTypeLoggly  LoggingDigitaloceanMessageType = "loggly"
	LoggingDigitaloceanMessageTypeLogplex LoggingDigitaloceanMessageType = "logplex"
	LoggingDigitaloceanMessageTypeBlank   LoggingDigitaloceanMessageType = "blank"
)

func (e LoggingDigitaloceanMessageType) ToPointer() *LoggingDigitaloceanMessageType {
	return &e
}

func (e *LoggingDigitaloceanMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingDigitaloceanMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanMessageType: %v", v)
	}
}

// LoggingDigitaloceanPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingDigitaloceanPlacement string

const (
	LoggingDigitaloceanPlacementNone                   LoggingDigitaloceanPlacement = "none"
	LoggingDigitaloceanPlacementWafDebug               LoggingDigitaloceanPlacement = "waf_debug"
	LoggingDigitaloceanPlacementLessThanNilGreaterThan LoggingDigitaloceanPlacement = "<nil>"
)

func (e LoggingDigitaloceanPlacement) ToPointer() *LoggingDigitaloceanPlacement {
	return &e
}

func (e *LoggingDigitaloceanPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingDigitaloceanPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingDigitaloceanPlacement: %v", v)
	}
}

type LoggingDigitalocean struct {
	// Your DigitalOcean Spaces account access key.
	AccessKey *string `form:"name=access_key"`
	// The name of the DigitalOcean Space.
	BucketName *string `form:"name=bucket_name"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingDigitaloceanCompressionCodec `form:"name=compression_codec"`
	// The domain of the DigitalOcean Spaces endpoint.
	Domain *string `default:"nyc3.digitaloceanspaces.com" form:"name=domain"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingDigitaloceanFormatVersion `default:"2" form:"name=format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `default:"0" form:"name=gzip_level"`
	// How the message should be formatted.
	MessageType *LoggingDigitaloceanMessageType `default:"classic" form:"name=message_type"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// The path to upload logs to.
	Path *string `default:"null" form:"name=path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `default:"3600" form:"name=period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingDigitaloceanPlacement `form:"name=placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `default:"null" form:"name=public_key"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// Your DigitalOcean Spaces account secret key.
	SecretKey *string `form:"name=secret_key"`
}

func (l LoggingDigitalocean) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingDigitalocean) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingDigitalocean) GetAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AccessKey
}

func (o *LoggingDigitalocean) GetBucketName() *string {
	if o == nil {
		return nil
	}
	return o.BucketName
}

func (o *LoggingDigitalocean) GetCompressionCodec() *LoggingDigitaloceanCompressionCodec {
	if o == nil {
		return nil
	}
	return o.CompressionCodec
}

func (o *LoggingDigitalocean) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *LoggingDigitalocean) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingDigitalocean) GetFormatVersion() *LoggingDigitaloceanFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingDigitalocean) GetGzipLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.GzipLevel
}

func (o *LoggingDigitalocean) GetMessageType() *LoggingDigitaloceanMessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingDigitalocean) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingDigitalocean) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *LoggingDigitalocean) GetPeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *LoggingDigitalocean) GetPlacement() *LoggingDigitaloceanPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingDigitalocean) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

func (o *LoggingDigitalocean) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingDigitalocean) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}
