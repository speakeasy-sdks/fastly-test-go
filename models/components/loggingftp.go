// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/fastly-test-go/internal/utils"
)

// LoggingFtpCompressionCodec - The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
type LoggingFtpCompressionCodec string

const (
	LoggingFtpCompressionCodecZstd   LoggingFtpCompressionCodec = "zstd"
	LoggingFtpCompressionCodecSnappy LoggingFtpCompressionCodec = "snappy"
	LoggingFtpCompressionCodecGzip   LoggingFtpCompressionCodec = "gzip"
)

func (e LoggingFtpCompressionCodec) ToPointer() *LoggingFtpCompressionCodec {
	return &e
}

func (e *LoggingFtpCompressionCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zstd":
		fallthrough
	case "snappy":
		fallthrough
	case "gzip":
		*e = LoggingFtpCompressionCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpCompressionCodec: %v", v)
	}
}

// LoggingFtpFormatVersion - The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
type LoggingFtpFormatVersion int64

const (
	LoggingFtpFormatVersionOne LoggingFtpFormatVersion = 1
	LoggingFtpFormatVersionTwo LoggingFtpFormatVersion = 2
)

func (e LoggingFtpFormatVersion) ToPointer() *LoggingFtpFormatVersion {
	return &e
}

func (e *LoggingFtpFormatVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = LoggingFtpFormatVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpFormatVersion: %v", v)
	}
}

// LoggingFtpMessageType - How the message should be formatted.
type LoggingFtpMessageType string

const (
	LoggingFtpMessageTypeClassic LoggingFtpMessageType = "classic"
	LoggingFtpMessageTypeLoggly  LoggingFtpMessageType = "loggly"
	LoggingFtpMessageTypeLogplex LoggingFtpMessageType = "logplex"
	LoggingFtpMessageTypeBlank   LoggingFtpMessageType = "blank"
)

func (e LoggingFtpMessageType) ToPointer() *LoggingFtpMessageType {
	return &e
}

func (e *LoggingFtpMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classic":
		fallthrough
	case "loggly":
		fallthrough
	case "logplex":
		fallthrough
	case "blank":
		*e = LoggingFtpMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpMessageType: %v", v)
	}
}

// LoggingFtpPlacement - Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
type LoggingFtpPlacement string

const (
	LoggingFtpPlacementNone                   LoggingFtpPlacement = "none"
	LoggingFtpPlacementWafDebug               LoggingFtpPlacement = "waf_debug"
	LoggingFtpPlacementLessThanNilGreaterThan LoggingFtpPlacement = "<nil>"
)

func (e LoggingFtpPlacement) ToPointer() *LoggingFtpPlacement {
	return &e
}

func (e *LoggingFtpPlacement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "waf_debug":
		fallthrough
	case "<nil>":
		*e = LoggingFtpPlacement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoggingFtpPlacement: %v", v)
	}
}

type LoggingFtp struct {
	// An hostname or IPv4 address.
	Address *string `form:"name=address"`
	// The codec used for compressing your logs. Valid values are `zstd`, `snappy`, and `gzip`. Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	CompressionCodec *LoggingFtpCompressionCodec `form:"name=compression_codec"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
	Format *string `default:"%h %l %u %t "%r" %&gt;s %b" form:"name=format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`.
	//
	FormatVersion *LoggingFtpFormatVersion `default:"2" form:"name=format_version"`
	// The level of gzip encoding when sending logs (default `0`, no compression). Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
	GzipLevel *int64 `default:"0" form:"name=gzip_level"`
	// Hostname used.
	Hostname *string `form:"name=hostname"`
	// IPv4 address of the host.
	Ipv4 *string `form:"name=ipv4"`
	// How the message should be formatted.
	MessageType *LoggingFtpMessageType `default:"classic" form:"name=message_type"`
	// The name for the real-time logging configuration.
	Name *string `form:"name=name"`
	// The password for the server. For anonymous use an email address.
	Password *string `form:"name=password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory.
	Path *string `form:"name=path"`
	// How frequently log files are finalized so they can be available for reading (in seconds).
	Period *int64 `default:"3600" form:"name=period"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`.
	//
	Placement *LoggingFtpPlacement `form:"name=placement"`
	// The port number.
	Port *int64 `default:"21" form:"name=port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `default:"null" form:"name=public_key"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `form:"name=response_condition"`
	// The username for the server. Can be anonymous.
	User *string `form:"name=user"`
}

func (l LoggingFtp) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LoggingFtp) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LoggingFtp) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *LoggingFtp) GetCompressionCodec() *LoggingFtpCompressionCodec {
	if o == nil {
		return nil
	}
	return o.CompressionCodec
}

func (o *LoggingFtp) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *LoggingFtp) GetFormatVersion() *LoggingFtpFormatVersion {
	if o == nil {
		return nil
	}
	return o.FormatVersion
}

func (o *LoggingFtp) GetGzipLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.GzipLevel
}

func (o *LoggingFtp) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *LoggingFtp) GetIpv4() *string {
	if o == nil {
		return nil
	}
	return o.Ipv4
}

func (o *LoggingFtp) GetMessageType() *LoggingFtpMessageType {
	if o == nil {
		return nil
	}
	return o.MessageType
}

func (o *LoggingFtp) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LoggingFtp) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *LoggingFtp) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *LoggingFtp) GetPeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *LoggingFtp) GetPlacement() *LoggingFtpPlacement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *LoggingFtp) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *LoggingFtp) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

func (o *LoggingFtp) GetResponseCondition() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCondition
}

func (o *LoggingFtp) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
