// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/fastly-test-go/internal/utils"
)

// InvitationDataStatusCode - Indicates whether or not the invitation is active.
type InvitationDataStatusCode int64

const (
	InvitationDataStatusCodeZero InvitationDataStatusCode = 0
	InvitationDataStatusCodeOne  InvitationDataStatusCode = 1
)

func (e InvitationDataStatusCode) ToPointer() *InvitationDataStatusCode {
	return &e
}

func (e *InvitationDataStatusCode) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = InvitationDataStatusCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationDataStatusCode: %v", v)
	}
}

type InvitationDataAttributes struct {
	// The email address of the invitee.
	Email *string `json:"email,omitempty"`
	// Indicates the user has limited access to the customer's services.
	LimitServices *bool `json:"limit_services,omitempty"`
	// The permissions role assigned to the user. Can be `user`, `billing`, `engineer`, or `superuser`.
	Role *RoleUser `json:"role,omitempty"`
	// Indicates whether or not the invitation is active.
	StatusCode *InvitationDataStatusCode `json:"status_code,omitempty"`
}

func (o *InvitationDataAttributes) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *InvitationDataAttributes) GetLimitServices() *bool {
	if o == nil {
		return nil
	}
	return o.LimitServices
}

func (o *InvitationDataAttributes) GetRole() *RoleUser {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *InvitationDataAttributes) GetStatusCode() *InvitationDataStatusCode {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

type InvitationData struct {
	Attributes    *InvitationDataAttributes             `json:"attributes,omitempty"`
	Relationships *RelationshipServiceInvitationsCreate `json:"relationships,omitempty"`
	// Resource type
	Type *TypeInvitation `default:"invitation" json:"type"`
}

func (i InvitationData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvitationData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvitationData) GetAttributes() *InvitationDataAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *InvitationData) GetRelationships() *RelationshipServiceInvitationsCreate {
	if o == nil {
		return nil
	}
	return o.Relationships
}

func (o *InvitationData) GetType() *TypeInvitation {
	if o == nil {
		return nil
	}
	return o.Type
}
