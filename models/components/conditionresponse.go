// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/fastly-test-go/v2/internal/utils"
	"time"
)

// ConditionResponseType - Type of the condition. Required.
type ConditionResponseType string

const (
	ConditionResponseTypeRequest  ConditionResponseType = "REQUEST"
	ConditionResponseTypeCache    ConditionResponseType = "CACHE"
	ConditionResponseTypeResponse ConditionResponseType = "RESPONSE"
	ConditionResponseTypePrefetch ConditionResponseType = "PREFETCH"
)

func (e ConditionResponseType) ToPointer() *ConditionResponseType {
	return &e
}

func (e *ConditionResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REQUEST":
		fallthrough
	case "CACHE":
		fallthrough
	case "RESPONSE":
		fallthrough
	case "PREFETCH":
		*e = ConditionResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionResponseType: %v", v)
	}
}

type ConditionResponse struct {
	// A freeform descriptive note.
	Comment *string `json:"comment,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date and time in ISO 8601 format.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name of the condition. Required.
	Name *string `json:"name,omitempty"`
	// A numeric string. Priority determines execution order. Lower numbers execute first.
	Priority  *string `default:"100" json:"priority"`
	ServiceID *string `json:"service_id,omitempty"`
	// A conditional expression in VCL used to determine if the condition is met.
	Statement *string `json:"statement,omitempty"`
	// Type of the condition. Required.
	Type *ConditionResponseType `json:"type,omitempty"`
	// Date and time in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// A numeric string that represents the service version.
	Version *string `json:"version,omitempty"`
}

func (c ConditionResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConditionResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConditionResponse) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *ConditionResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ConditionResponse) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *ConditionResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConditionResponse) GetPriority() *string {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ConditionResponse) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *ConditionResponse) GetStatement() *string {
	if o == nil {
		return nil
	}
	return o.Statement
}

func (o *ConditionResponse) GetType() *ConditionResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConditionResponse) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ConditionResponse) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}
