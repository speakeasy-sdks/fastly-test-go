// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/fastly-test-go/v2/internal/utils"
	"time"
)

// EventType - Type of event. Can be used with `filter[event_type]`
type EventType string

const (
	EventTypeAPIKeyCreate                  EventType = "api_key.create"
	EventTypeACLCreate                     EventType = "acl.create"
	EventTypeACLDelete                     EventType = "acl.delete"
	EventTypeACLUpdate                     EventType = "acl.update"
	EventTypeAddressCreate                 EventType = "address.create"
	EventTypeAddressDelete                 EventType = "address.delete"
	EventTypeAddressUpdate                 EventType = "address.update"
	EventTypeBackendCreate                 EventType = "backend.create"
	EventTypeBackendDelete                 EventType = "backend.delete"
	EventTypeBackendUpdate                 EventType = "backend.update"
	EventTypeBillingContactUpdate          EventType = "billing.contact_update"
	EventTypeCacheSettingsCreate           EventType = "cache_settings.create"
	EventTypeCacheSettingsDelete           EventType = "cache_settings.delete"
	EventTypeCacheSettingsUpdate           EventType = "cache_settings.update"
	EventTypeCustomerCreate                EventType = "customer.create"
	EventTypeCustomerPricing               EventType = "customer.pricing"
	EventTypeCustomerUpdate                EventType = "customer.update"
	EventTypeCustomerFeatureCreate         EventType = "customer_feature.create"
	EventTypeCustomerFeatureDelete         EventType = "customer_feature.delete"
	EventTypeDirectorCreate                EventType = "director.create"
	EventTypeDirectorDelete                EventType = "director.delete"
	EventTypeDirectorUpdate                EventType = "director.update"
	EventTypeDirectorBackendCreate         EventType = "director_backend.create"
	EventTypeDirectorBackendDelete         EventType = "director_backend.delete"
	EventTypeDomainCreate                  EventType = "domain.create"
	EventTypeDomainDelete                  EventType = "domain.delete"
	EventTypeDomainUpdate                  EventType = "domain.update"
	EventTypeGzipCreate                    EventType = "gzip.create"
	EventTypeGzipDelete                    EventType = "gzip.delete"
	EventTypeGzipUpdate                    EventType = "gzip.update"
	EventTypeHeaderCreate                  EventType = "header.create"
	EventTypeHeaderDelete                  EventType = "header.delete"
	EventTypeHeaderUpdate                  EventType = "header.update"
	EventTypeHealthcheckCreate             EventType = "healthcheck.create"
	EventTypeHealthcheckDelete             EventType = "healthcheck.delete"
	EventTypeHealthcheckUpdate             EventType = "healthcheck.update"
	EventTypeInvitationAccept              EventType = "invitation.accept"
	EventTypeInvitationSent                EventType = "invitation.sent"
	EventTypeInvoiceFailedPayment          EventType = "invoice.failed_payment"
	EventTypeInvoicePayment                EventType = "invoice.payment"
	EventTypeIoSettingsCreate              EventType = "io_settings.create"
	EventTypeIoSettingsDelete              EventType = "io_settings.delete"
	EventTypeIoSettingsUpdate              EventType = "io_settings.update"
	EventTypeLoggingCreate                 EventType = "logging.create"
	EventTypeLoggingDelete                 EventType = "logging.delete"
	EventTypeLoggingUpdate                 EventType = "logging.update"
	EventTypePoolCreate                    EventType = "pool.create"
	EventTypePoolDelete                    EventType = "pool.delete"
	EventTypePoolUpdate                    EventType = "pool.update"
	EventTypeRequestSettingsCreate         EventType = "request_settings.create"
	EventTypeRequestSettingsDelete         EventType = "request_settings.delete"
	EventTypeRequestSettingsUpdate         EventType = "request_settings.update"
	EventTypeResponseObjectCreate          EventType = "response_object.create"
	EventTypeResponseObjectDelete          EventType = "response_object.delete"
	EventTypeResponseObjectUpdate          EventType = "response_object.update"
	EventTypeRuleStatusUpdate              EventType = "rule_status.update"
	EventTypeRuleStatusUpsert              EventType = "rule_status.upsert"
	EventTypeServerCreate                  EventType = "server.create"
	EventTypeServerDelete                  EventType = "server.delete"
	EventTypeServerUpdate                  EventType = "server.update"
	EventTypeServiceCreate                 EventType = "service.create"
	EventTypeServiceDelete                 EventType = "service.delete"
	EventTypeServiceMove                   EventType = "service.move"
	EventTypeServiceMoveDestination        EventType = "service.move_destination"
	EventTypeServiceMoveSource             EventType = "service.move_source"
	EventTypeServicePurgeAll               EventType = "service.purge_all"
	EventTypeServiceUpdate                 EventType = "service.update"
	EventTypeServiceAuthorizationCreate    EventType = "service_authorization.create"
	EventTypeServiceAuthorizationDelete    EventType = "service_authorization.delete"
	EventTypeServiceAuthorizationUpdate    EventType = "service_authorization.update"
	EventTypeTLSBulkCertificateCreate      EventType = "tls.bulk_certificate.create"
	EventTypeTLSBulkCertificateDelete      EventType = "tls.bulk_certificate.delete"
	EventTypeTLSBulkCertificateUpdate      EventType = "tls.bulk_certificate.update"
	EventTypeTLSCertificateCreate          EventType = "tls.certificate.create"
	EventTypeTLSCertificateExpirationEmail EventType = "tls.certificate.expiration_email"
	EventTypeTLSCertificateUpdate          EventType = "tls.certificate.update"
	EventTypeTLSCertificateDelete          EventType = "tls.certificate.delete"
	EventTypeTLSConfigurationUpdate        EventType = "tls.configuration.update"
	EventTypeTLSPrivateKeyCreate           EventType = "tls.private_key.create"
	EventTypeTLSPrivateKeyDelete           EventType = "tls.private_key.delete"
	EventTypeTLSActivationEnable           EventType = "tls.activation.enable"
	EventTypeTLSActivationUpdate           EventType = "tls.activation.update"
	EventTypeTLSActivationDisable          EventType = "tls.activation.disable"
	EventTypeTLSGlobalsignDomainCreate     EventType = "tls.globalsign.domain.create"
	EventTypeTLSGlobalsignDomainVerify     EventType = "tls.globalsign.domain.verify"
	EventTypeTLSGlobalsignDomainDelete     EventType = "tls.globalsign.domain.delete"
	EventTypeTLSSubscriptionCreate         EventType = "tls.subscription.create"
	EventTypeTLSSubscriptionDelete         EventType = "tls.subscription.delete"
	EventTypeTLSSubscriptionDNSCheckEmail  EventType = "tls.subscription.dns_check_email"
	EventTypeTokenCreate                   EventType = "token.create"
	EventTypeTokenDestroy                  EventType = "token.destroy"
	EventTypeTwoFactorAuthDisable          EventType = "two_factor_auth.disable"
	EventTypeTwoFactorAuthEnable           EventType = "two_factor_auth.enable"
	EventTypeUserCreate                    EventType = "user.create"
	EventTypeUserDestroy                   EventType = "user.destroy"
	EventTypeUserLock                      EventType = "user.lock"
	EventTypeUserLogin                     EventType = "user.login"
	EventTypeUserLoginFailure              EventType = "user.login_failure"
	EventTypeUserLogout                    EventType = "user.logout"
	EventTypeUserPasswordUpdate            EventType = "user.password_update"
	EventTypeUserUnlock                    EventType = "user.unlock"
	EventTypeUserUpdate                    EventType = "user.update"
	EventTypeVclCreate                     EventType = "vcl.create"
	EventTypeVclDelete                     EventType = "vcl.delete"
	EventTypeVclUpdate                     EventType = "vcl.update"
	EventTypeVersionActivate               EventType = "version.activate"
	EventTypeVersionClone                  EventType = "version.clone"
	EventTypeVersionCopy                   EventType = "version.copy"
	EventTypeVersionCopyDestination        EventType = "version.copy_destination"
	EventTypeVersionCopySource             EventType = "version.copy_source"
	EventTypeVersionCreate                 EventType = "version.create"
	EventTypeVersionDeactivate             EventType = "version.deactivate"
	EventTypeVersionLock                   EventType = "version.lock"
	EventTypeVersionUpdate                 EventType = "version.update"
	EventTypeWafConfigurationSetUpdate     EventType = "waf.configuration_set_update"
	EventTypeWafCreate                     EventType = "waf.create"
	EventTypeWafDelete                     EventType = "waf.delete"
	EventTypeWafUpdate                     EventType = "waf.update"
	EventTypeWafEnable                     EventType = "waf.enable"
	EventTypeWafDisable                    EventType = "waf.disable"
	EventTypeWafOwaspCreate                EventType = "waf.owasp.create"
	EventTypeWafOwaspUpdate                EventType = "waf.owasp.update"
	EventTypeWafRulesetDeploy              EventType = "waf.ruleset.deploy"
	EventTypeWafRulesetDeployFailure       EventType = "waf.ruleset.deploy_failure"
	EventTypeWordpressCreate               EventType = "wordpress.create"
	EventTypeWordpressDelete               EventType = "wordpress.delete"
	EventTypeWordpressUpdate               EventType = "wordpress.update"
)

func (e EventType) ToPointer() *EventType {
	return &e
}

func (e *EventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_key.create":
		fallthrough
	case "acl.create":
		fallthrough
	case "acl.delete":
		fallthrough
	case "acl.update":
		fallthrough
	case "address.create":
		fallthrough
	case "address.delete":
		fallthrough
	case "address.update":
		fallthrough
	case "backend.create":
		fallthrough
	case "backend.delete":
		fallthrough
	case "backend.update":
		fallthrough
	case "billing.contact_update":
		fallthrough
	case "cache_settings.create":
		fallthrough
	case "cache_settings.delete":
		fallthrough
	case "cache_settings.update":
		fallthrough
	case "customer.create":
		fallthrough
	case "customer.pricing":
		fallthrough
	case "customer.update":
		fallthrough
	case "customer_feature.create":
		fallthrough
	case "customer_feature.delete":
		fallthrough
	case "director.create":
		fallthrough
	case "director.delete":
		fallthrough
	case "director.update":
		fallthrough
	case "director_backend.create":
		fallthrough
	case "director_backend.delete":
		fallthrough
	case "domain.create":
		fallthrough
	case "domain.delete":
		fallthrough
	case "domain.update":
		fallthrough
	case "gzip.create":
		fallthrough
	case "gzip.delete":
		fallthrough
	case "gzip.update":
		fallthrough
	case "header.create":
		fallthrough
	case "header.delete":
		fallthrough
	case "header.update":
		fallthrough
	case "healthcheck.create":
		fallthrough
	case "healthcheck.delete":
		fallthrough
	case "healthcheck.update":
		fallthrough
	case "invitation.accept":
		fallthrough
	case "invitation.sent":
		fallthrough
	case "invoice.failed_payment":
		fallthrough
	case "invoice.payment":
		fallthrough
	case "io_settings.create":
		fallthrough
	case "io_settings.delete":
		fallthrough
	case "io_settings.update":
		fallthrough
	case "logging.create":
		fallthrough
	case "logging.delete":
		fallthrough
	case "logging.update":
		fallthrough
	case "pool.create":
		fallthrough
	case "pool.delete":
		fallthrough
	case "pool.update":
		fallthrough
	case "request_settings.create":
		fallthrough
	case "request_settings.delete":
		fallthrough
	case "request_settings.update":
		fallthrough
	case "response_object.create":
		fallthrough
	case "response_object.delete":
		fallthrough
	case "response_object.update":
		fallthrough
	case "rule_status.update":
		fallthrough
	case "rule_status.upsert":
		fallthrough
	case "server.create":
		fallthrough
	case "server.delete":
		fallthrough
	case "server.update":
		fallthrough
	case "service.create":
		fallthrough
	case "service.delete":
		fallthrough
	case "service.move":
		fallthrough
	case "service.move_destination":
		fallthrough
	case "service.move_source":
		fallthrough
	case "service.purge_all":
		fallthrough
	case "service.update":
		fallthrough
	case "service_authorization.create":
		fallthrough
	case "service_authorization.delete":
		fallthrough
	case "service_authorization.update":
		fallthrough
	case "tls.bulk_certificate.create":
		fallthrough
	case "tls.bulk_certificate.delete":
		fallthrough
	case "tls.bulk_certificate.update":
		fallthrough
	case "tls.certificate.create":
		fallthrough
	case "tls.certificate.expiration_email":
		fallthrough
	case "tls.certificate.update":
		fallthrough
	case "tls.certificate.delete":
		fallthrough
	case "tls.configuration.update":
		fallthrough
	case "tls.private_key.create":
		fallthrough
	case "tls.private_key.delete":
		fallthrough
	case "tls.activation.enable":
		fallthrough
	case "tls.activation.update":
		fallthrough
	case "tls.activation.disable":
		fallthrough
	case "tls.globalsign.domain.create":
		fallthrough
	case "tls.globalsign.domain.verify":
		fallthrough
	case "tls.globalsign.domain.delete":
		fallthrough
	case "tls.subscription.create":
		fallthrough
	case "tls.subscription.delete":
		fallthrough
	case "tls.subscription.dns_check_email":
		fallthrough
	case "token.create":
		fallthrough
	case "token.destroy":
		fallthrough
	case "two_factor_auth.disable":
		fallthrough
	case "two_factor_auth.enable":
		fallthrough
	case "user.create":
		fallthrough
	case "user.destroy":
		fallthrough
	case "user.lock":
		fallthrough
	case "user.login":
		fallthrough
	case "user.login_failure":
		fallthrough
	case "user.logout":
		fallthrough
	case "user.password_update":
		fallthrough
	case "user.unlock":
		fallthrough
	case "user.update":
		fallthrough
	case "vcl.create":
		fallthrough
	case "vcl.delete":
		fallthrough
	case "vcl.update":
		fallthrough
	case "version.activate":
		fallthrough
	case "version.clone":
		fallthrough
	case "version.copy":
		fallthrough
	case "version.copy_destination":
		fallthrough
	case "version.copy_source":
		fallthrough
	case "version.create":
		fallthrough
	case "version.deactivate":
		fallthrough
	case "version.lock":
		fallthrough
	case "version.update":
		fallthrough
	case "waf.configuration_set_update":
		fallthrough
	case "waf.create":
		fallthrough
	case "waf.delete":
		fallthrough
	case "waf.update":
		fallthrough
	case "waf.enable":
		fallthrough
	case "waf.disable":
		fallthrough
	case "waf.owasp.create":
		fallthrough
	case "waf.owasp.update":
		fallthrough
	case "waf.ruleset.deploy":
		fallthrough
	case "waf.ruleset.deploy_failure":
		fallthrough
	case "wordpress.create":
		fallthrough
	case "wordpress.delete":
		fallthrough
	case "wordpress.update":
		*e = EventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventType: %v", v)
	}
}

// Metadata - Hash of key value pairs of additional information.
type Metadata struct {
}

type EventAttributes struct {
	// Indicates if event was performed by Fastly.
	Admin *bool `json:"admin,omitempty"`
	// Date and time in ISO 8601 format.
	CreatedAt  *time.Time `json:"created_at,omitempty"`
	CustomerID *string    `json:"customer_id,omitempty"`
	// Description of the event.
	Description *string `json:"description,omitempty"`
	// Type of event. Can be used with `filter[event_type]`
	EventType *EventType `json:"event_type,omitempty"`
	// IP addresses that the event was requested from.
	IP *string `json:"ip,omitempty"`
	// Hash of key value pairs of additional information.
	Metadata  *Metadata `json:"metadata,omitempty"`
	ServiceID *string   `json:"service_id,omitempty"`
	TokenID   *string   `json:"token_id,omitempty"`
	UserID    *string   `json:"user_id,omitempty"`
}

func (e EventAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventAttributes) GetAdmin() *bool {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *EventAttributes) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EventAttributes) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *EventAttributes) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventAttributes) GetEventType() *EventType {
	if o == nil {
		return nil
	}
	return o.EventType
}

func (o *EventAttributes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *EventAttributes) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *EventAttributes) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *EventAttributes) GetTokenID() *string {
	if o == nil {
		return nil
	}
	return o.TokenID
}

func (o *EventAttributes) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type Event struct {
	Attributes *EventAttributes `json:"attributes,omitempty"`
	ID         *string          `json:"id,omitempty"`
	// Resource type
	Type *TypeEvent `default:"event" json:"type"`
}

func (e Event) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Event) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Event) GetAttributes() *EventAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *Event) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Event) GetType() *TypeEvent {
	if o == nil {
		return nil
	}
	return o.Type
}
