// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"Fastly/internal/utils"
	"encoding/json"
	"fmt"
)

// WafRuleResponseDataPublisher - Rule publisher.
type WafRuleResponseDataPublisher string

const (
	WafRuleResponseDataPublisherFastly    WafRuleResponseDataPublisher = "fastly"
	WafRuleResponseDataPublisherTrustwave WafRuleResponseDataPublisher = "trustwave"
	WafRuleResponseDataPublisherOwasp     WafRuleResponseDataPublisher = "owasp"
)

func (e WafRuleResponseDataPublisher) ToPointer() *WafRuleResponseDataPublisher {
	return &e
}

func (e *WafRuleResponseDataPublisher) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fastly":
		fallthrough
	case "trustwave":
		fallthrough
	case "owasp":
		*e = WafRuleResponseDataPublisher(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WafRuleResponseDataPublisher: %v", v)
	}
}

// WafRuleResponseDataType - The rule's [type](https://docs.fastly.com/en/guides/managing-rules-on-the-fastly-waf#understanding-the-types-of-rules).
type WafRuleResponseDataType string

const (
	WafRuleResponseDataTypeStrict    WafRuleResponseDataType = "strict"
	WafRuleResponseDataTypeScore     WafRuleResponseDataType = "score"
	WafRuleResponseDataTypeThreshold WafRuleResponseDataType = "threshold"
)

func (e WafRuleResponseDataType) ToPointer() *WafRuleResponseDataType {
	return &e
}

func (e *WafRuleResponseDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "strict":
		fallthrough
	case "score":
		fallthrough
	case "threshold":
		*e = WafRuleResponseDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WafRuleResponseDataType: %v", v)
	}
}

type WafRuleResponseDataAttributes struct {
	// Corresponding ModSecurity rule ID.
	ModsecRuleID *int64 `json:"modsec_rule_id,omitempty"`
	// Rule publisher.
	Publisher *WafRuleResponseDataPublisher `json:"publisher,omitempty"`
	// The rule's [type](https://docs.fastly.com/en/guides/managing-rules-on-the-fastly-waf#understanding-the-types-of-rules).
	Type *WafRuleResponseDataType `json:"type,omitempty"`
}

func (o *WafRuleResponseDataAttributes) GetModsecRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.ModsecRuleID
}

func (o *WafRuleResponseDataAttributes) GetPublisher() *WafRuleResponseDataPublisher {
	if o == nil {
		return nil
	}
	return o.Publisher
}

func (o *WafRuleResponseDataAttributes) GetType() *WafRuleResponseDataType {
	if o == nil {
		return nil
	}
	return o.Type
}

type WafRuleResponseData struct {
	Attributes    *WafRuleResponseDataAttributes `json:"attributes,omitempty"`
	ID            *string                        `json:"id,omitempty"`
	Relationships *RelationshipsForWafRule       `json:"relationships,omitempty"`
	// Resource type.
	Type *TypeWafRule `default:"waf_rule" json:"type"`
}

func (w WafRuleResponseData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WafRuleResponseData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WafRuleResponseData) GetAttributes() *WafRuleResponseDataAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *WafRuleResponseData) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *WafRuleResponseData) GetRelationships() *RelationshipsForWafRule {
	if o == nil {
		return nil
	}
	return o.Relationships
}

func (o *WafRuleResponseData) GetType() *TypeWafRule {
	if o == nil {
		return nil
	}
	return o.Type
}
