// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/fastly-test-go/internal/utils"
	"net/http"
)

type GetKeysRequest struct {
	Cursor  *string `queryParam:"style=form,explode=true,name=cursor"`
	Limit   *int64  `default:"100" queryParam:"style=form,explode=true,name=limit"`
	Prefix  *string `queryParam:"style=form,explode=true,name=prefix"`
	StoreID string  `pathParam:"style=simple,explode=false,name=store_id"`
}

func (g GetKeysRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetKeysRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetKeysRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *GetKeysRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetKeysRequest) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *GetKeysRequest) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetKeysMeta struct {
	Limit      *int64  `json:"limit,omitempty"`
	NextCursor *string `json:"next_cursor,omitempty"`
}

func (o *GetKeysMeta) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetKeysMeta) GetNextCursor() *string {
	if o == nil {
		return nil
	}
	return o.NextCursor
}

// GetKeysResponseBody - OK
type GetKeysResponseBody struct {
	Data []string     `json:"data,omitempty"`
	Meta *GetKeysMeta `json:"meta,omitempty"`
}

func (o *GetKeysResponseBody) GetData() []string {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetKeysResponseBody) GetMeta() *GetKeysMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetKeysResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object *GetKeysResponseBody
}

func (o *GetKeysResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetKeysResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetKeysResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetKeysResponse) GetObject() *GetKeysResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
