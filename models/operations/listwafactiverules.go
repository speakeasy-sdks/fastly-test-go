// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/fastly-test-go/v2/internal/utils"
	"github.com/speakeasy-sdks/fastly-test-go/v2/models/components"
	"net/http"
)

type ListWafActiveRulesRequest struct {
	// Limit results to active rules referencing an outdated rule revision.
	FilterOutdated *string `queryParam:"style=form,explode=true,name=filter[outdated]"`
	// Limit results to active rules with the specified status.
	FilterStatus *string `queryParam:"style=form,explode=true,name=filter[status]"`
	// Limit results to active rules with the specified message.
	FilterWafRuleRevisionMessage *string `queryParam:"style=form,explode=true,name=filter[waf_rule_revision][message]"`
	// Limit results to active rules that represent the specified ModSecurity modsec_rule_id.
	FilterWafRuleRevisionModsecRuleID *string `queryParam:"style=form,explode=true,name=filter[waf_rule_revision][modsec_rule_id]"`
	// Alphanumeric string identifying a WAF Firewall.
	FirewallID string `pathParam:"style=simple,explode=false,name=firewall_id"`
	// Include relationships. Optional, comma-separated values. Permitted values: `waf_rule_revision` and `waf_firewall_version`.
	//
	Include *string `queryParam:"style=form,explode=true,name=include"`
	// Current page.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Number of records per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page[size]"`
	// Integer identifying a service version.
	VersionID int64 `pathParam:"style=simple,explode=false,name=version_id"`
}

func (l ListWafActiveRulesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListWafActiveRulesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListWafActiveRulesRequest) GetFilterOutdated() *string {
	if o == nil {
		return nil
	}
	return o.FilterOutdated
}

func (o *ListWafActiveRulesRequest) GetFilterStatus() *string {
	if o == nil {
		return nil
	}
	return o.FilterStatus
}

func (o *ListWafActiveRulesRequest) GetFilterWafRuleRevisionMessage() *string {
	if o == nil {
		return nil
	}
	return o.FilterWafRuleRevisionMessage
}

func (o *ListWafActiveRulesRequest) GetFilterWafRuleRevisionModsecRuleID() *string {
	if o == nil {
		return nil
	}
	return o.FilterWafRuleRevisionModsecRuleID
}

func (o *ListWafActiveRulesRequest) GetFirewallID() string {
	if o == nil {
		return ""
	}
	return o.FirewallID
}

func (o *ListWafActiveRulesRequest) GetInclude() *string {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *ListWafActiveRulesRequest) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *ListWafActiveRulesRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListWafActiveRulesRequest) GetVersionID() int64 {
	if o == nil {
		return 0
	}
	return o.VersionID
}

type ListWafActiveRulesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	WafActiveRulesResponse *components.WafActiveRulesResponse
}

func (o *ListWafActiveRulesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListWafActiveRulesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListWafActiveRulesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListWafActiveRulesResponse) GetWafActiveRulesResponse() *components.WafActiveRulesResponse {
	if o == nil {
		return nil
	}
	return o.WafActiveRulesResponse
}
