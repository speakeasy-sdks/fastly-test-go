// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Fastly/internal/utils"
	"Fastly/models/components"
	"net/http"
)

type ListEventsRequest struct {
	// Limit the returned events to a specific time frame. Accepts sub-parameters: lt, lte, gt, gte (e.g., filter[created_at][gt]=2022-01-12).
	//
	FilterCreatedAt *string `queryParam:"style=form,explode=true,name=filter[created_at]"`
	// Limit the results returned to a specific customer.
	FilterCustomerID *string `queryParam:"style=form,explode=true,name=filter[customer_id]"`
	// Limit the returned events to a specific `event_type`.
	FilterEventType *string `queryParam:"style=form,explode=true,name=filter[event_type]"`
	// Limit the results returned to a specific service.
	FilterServiceID *string `queryParam:"style=form,explode=true,name=filter[service_id]"`
	// Limit the returned events to a specific token.
	FilterTokenID *string `queryParam:"style=form,explode=true,name=filter[token_id]"`
	// Limit the results returned to a specific user.
	FilterUserID *string `queryParam:"style=form,explode=true,name=filter[user_id]"`
	// Current page.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Number of records per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page[size]"`
	// The order in which to list the results by creation date.
	Sort *components.Sort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
}

func (l ListEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListEventsRequest) GetFilterCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.FilterCreatedAt
}

func (o *ListEventsRequest) GetFilterCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.FilterCustomerID
}

func (o *ListEventsRequest) GetFilterEventType() *string {
	if o == nil {
		return nil
	}
	return o.FilterEventType
}

func (o *ListEventsRequest) GetFilterServiceID() *string {
	if o == nil {
		return nil
	}
	return o.FilterServiceID
}

func (o *ListEventsRequest) GetFilterTokenID() *string {
	if o == nil {
		return nil
	}
	return o.FilterTokenID
}

func (o *ListEventsRequest) GetFilterUserID() *string {
	if o == nil {
		return nil
	}
	return o.FilterUserID
}

func (o *ListEventsRequest) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *ListEventsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListEventsRequest) GetSort() *components.Sort {
	if o == nil {
		return nil
	}
	return o.Sort
}

type ListEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	EventsResponse *components.EventsResponse
}

func (o *ListEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListEventsResponse) GetEventsResponse() *components.EventsResponse {
	if o == nil {
		return nil
	}
	return o.EventsResponse
}
